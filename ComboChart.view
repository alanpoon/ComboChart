<<<<<<<=view-json=
{
  "id":"ComboChart",
  "name":"ComboChart",
  "category":"Chart",
  "default":{
    "jsonClass":"View",
    "elxType":"View",
    "vtype":"bundle",
    "state":"visible",
    "isContainer":false,
    "position":{
      "jsonClass":"Position",
      "elxType":"Position",
      "height":"480",
      "width":"600",
      "zIndex":"auto"
    },
    "data":{
      "jsonClass":"DataEmbedded",
      "datasource":{
        "jsonClass":"DataSource",
        "name":"initData",
        "stype":"Data",
        "desc":"default data",
        "schema":{
          "jsonClass":"Schema",
          "caseSensitive":false,
          "columns":[{
            "jsonClass":"SchemaColumn",
            "name":"Maintenance",
            "dtype":"Double",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Diesel",
            "dtype":"Double",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Manpower",
            "dtype":"Double",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Categories",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Employees",
            "dtype":"String",
            "attrs":[]
          }]
        },
        "data":{
          "jsonClass":"DataRecords",
          "records":[{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":49.9
            },{
              "jsonClass":"Field",
              "value":7
            },{
              "jsonClass":"Field",
              "value":24
            },{
              "jsonClass":"Field",
              "value":"Jan"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":71.5
            },{
              "jsonClass":"Field",
              "value":6.9
            },{
              "jsonClass":"Field",
              "value":14
            },{
              "jsonClass":"Field",
              "value":"Feb"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":106.4
            },{
              "jsonClass":"Field",
              "value":9.5
            },{
              "jsonClass":"Field",
              "value":21
            },{
              "jsonClass":"Field",
              "value":"Mar"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":129.2
            },{
              "jsonClass":"Field",
              "value":14.5
            },{
              "jsonClass":"Field",
              "value":57
            },{
              "jsonClass":"Field",
              "value":"Apr"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":144
            },{
              "jsonClass":"Field",
              "value":18.2
            },{
              "jsonClass":"Field",
              "value":8
            },{
              "jsonClass":"Field",
              "value":"May"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":176
            },{
              "jsonClass":"Field",
              "value":21.5
            },{
              "jsonClass":"Field",
              "value":12
            },{
              "jsonClass":"Field",
              "value":"Jun"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":135.6
            },{
              "jsonClass":"Field",
              "value":25.2
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Jul"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":148.5
            },{
              "jsonClass":"Field",
              "value":26.5
            },{
              "jsonClass":"Field",
              "value":67
            },{
              "jsonClass":"Field",
              "value":"Aug"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":216.4
            },{
              "jsonClass":"Field",
              "value":23.3
            },{
              "jsonClass":"Field",
              "value":53
            },{
              "jsonClass":"Field",
              "value":"Sep"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":194.1
            },{
              "jsonClass":"Field",
              "value":18.3
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Oct"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":95.6
            },{
              "jsonClass":"Field",
              "value":13.9
            },{
              "jsonClass":"Field",
              "value":29
            },{
              "jsonClass":"Field",
              "value":"Nov"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":54.4
            },{
              "jsonClass":"Field",
              "value":9.6
            },{
              "jsonClass":"Field",
              "value":18.2
            },{
              "jsonClass":"Field",
              "value":"Dec"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":43
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":15
            },{
              "jsonClass":"Field",
              "value":"Jan"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":63
            },{
              "jsonClass":"Field",
              "value":34
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Feb"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":12
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Mar"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":52
            },{
              "jsonClass":"Field",
              "value":12
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Apr"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":21
            },{
              "jsonClass":"Field",
              "value":35
            },{
              "jsonClass":"Field",
              "value":6
            },{
              "jsonClass":"Field",
              "value":"May"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":53
            },{
              "jsonClass":"Field",
              "value":8
            },{
              "jsonClass":"Field",
              "value":"Jun"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":106.4
            },{
              "jsonClass":"Field",
              "value":9.5
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Jul"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":129.2
            },{
              "jsonClass":"Field",
              "value":14.5
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Aug"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":144
            },{
              "jsonClass":"Field",
              "value":18.2
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Sep"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":176
            },{
              "jsonClass":"Field",
              "value":21.5
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Oct"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":106.4
            },{
              "jsonClass":"Field",
              "value":9.5
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Nov"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":129.2
            },{
              "jsonClass":"Field",
              "value":14.5
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Dec"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          }]
        }
      },
      "hint":"directive-data-array",
      "directive":"ZnVuY3Rpb24gZGF0YSgpew0KICAgIHZhciB0PXZpZXcudHlwZWluZm8uZGF0YS5maWVsZHMub3BlcmFibGUudmFsdWVzOw0KICAJdmFyIGs9dmlldy50eXBlaW5mby5kYXRhLmZpZWxkcy5rZXlzOw0KDQogIHZhciBjb2x1bW5zPVtdOyB2YXIgb3BlcmF0aW9ucz1bXTsgdmFyIGtleXM9W107DQogIHQuZm9yRWFjaChmdW5jdGlvbihkLGkpIHsNCiAgY29sdW1ucy5wdXNoKGQubmFtZSk7DQogICAgb3BlcmF0aW9ucy5wdXNoKGQub3ApOw0KICB9KQ0KICBrLmZvckVhY2goZnVuY3Rpb24oZCxpKSB7DQogICAga2V5cy5wdXNoKGQubmFtZSk7fSkNCiAgIHJldHVybiByb3dzLmdyb3VwQnkoa2V5cyxjb2x1bW5zLCBvcGVyYXRpb25zKTsNCn0NCmRhdGEoKTs="
    },
    "typeinfo":{
      "jsonClass":"Bundle",
      "type":"ComboChart",
      "data":{
        "series":{
          "sort":"series-asc"
        },
        "keys":{
          "sort":"key-asc"
        },
        "fields":{
          "keys":[{
            "name":"Categories"
          }],
          "operable":{
            "values":[{
              "id":"column.L1",
              "name":"Tonnage",
              "op":"sum"
            }]
          }
        }
      },
      "width":500,
      "height":510,
      "centre":450,
      "marginB":0,
      "marginT":50,
      "marginL":170,
      "marginR":200,
      "title":"Average Monthly R_column and R_splime in Tokyo",
      "subtitle":"Source: WorldClimate.com",
      "yAxisArray":"Title1,Title2",
      "colorSeriesArray":"#7cb5ec,#434348,#90ed7d,#f7a35c,#8085e9,#f15c80,#e4d354,#8085e8,#8d4653,#91e8e1",
      "categoryIsMonth":"Yes",
      "categoryIsMonthFixed":"Yes",
      "formatCategoryCast":"",
      "formatOrderingCast":"",
      "formatLegendCast":"formatLegend={'columnInducedGroupby.L1': function(dataZero) {   return dataZero.columnNameWithoutOp;   } };",
      "legendKey":"ColumnName"
    }
  },
  "includes":["/elx/lib/highcharts.js","/elx/lib/Accent2.js"],
  "edit-section":[{
    "id":"view",
    "name":"View"
  },{
    "id":"data",
    "name":"Data"
  },{
    "id":"ComboChart",
    "name":"ComboChart"
  },{
    "id":"filters",
    "name":"Filters"
  }]
}
========
<<<<<<<=edit-json=
{
  "jsonClass":"ViewSectionGroup",
  "id":"ComboChart",
  "groups":[{
    "jsonClass":"Group",
    "label":"Data",
    "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-height-label",
        "type":"label",
        "text":"Chart Height"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-height",
        "type":"field",
        "value":"${typeinfo.height}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-width-label",
        "type":"label",
        "text":"Chart Width"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-width",
        "type":"field",
        "value":"${typeinfo.width}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-centre-label",
        "type":"label",
        "text":"Chart centre"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-centre",
        "type":"field",
        "value":"${typeinfo.centre}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-property-label",
        "type":"label",
        "text":"Keys"
      },{
        "jsonClass":"Div",
        "id":"typeinfo-property"
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-data-fields-operable-values-label",
        "type":"label",
        "text":"Column"
      },{
        "jsonClass":"Div",
        "id":"typeinfo-data-fields-operable-values"
      }]
    }]
  },{
    "jsonClass":"Group",
    "label":"Title",
    "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-title-label",
        "type":"label",
        "text":"Title"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-title",
        "type":"field",
        "value":"${typeinfo.title}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-subtitle-label",
        "type":"label",
        "text":"Subtitle"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-subtitle",
        "type":"field",
        "value":"${typeinfo.subtitle}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-yAxisArray-label",
        "type":"label",
        "text":"YAxis Array"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-yAxisArray",
        "type":"field",
        "value":"${typeinfo.yAxisArray}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-colorSeriesArray-label",
        "type":"label",
        "text":"Color Series Array"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-colorSeriesArray",
        "type":"field",
        "value":"${typeinfo.colorSeriesArray}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-marginL-label",
        "type":"label",
        "text":"Left margin"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-marginL",
        "type":"field",
        "value":"${typeinfo.marginL}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-marginR-label",
        "type":"label",
        "text":"Right margin"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-marginR",
        "type":"field",
        "value":"${typeinfo.marginR}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-marginT-label",
        "type":"label",
        "text":"Top margin"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-marginT",
        "type":"field",
        "value":"${typeinfo.marginT}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-marginB-label",
        "type":"label",
        "text":"Bottom margin"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-marginB",
        "type":"field",
        "value":"${typeinfo.marginB}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-categoryIsMonth-label",
        "type":"label",
        "text":"Is Category month?"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-categoryIsMonth",
        "type":"select",
        "value":"${typeinfo.categoryIsMonth}",
        "options":[{
          "jsonClass":"Option",
          "text":"Yes",
          "value":"Yes"
        },{
          "jsonClass":"Option",
          "text":"No",
          "value":"No"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-categoryIsMonthFixed-label",
        "type":"label",
        "text":"Category is Month Fixed"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-categoryIsMonthFixed",
        "type":"select",
        "value":"${typeinfo.categoryIsMonthFixed}",
        "options":[{
          "jsonClass":"Option",
          "text":"Yes",
          "value":"Yes"
        },{
          "jsonClass":"Option",
          "text":"No",
          "value":"No"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatCategoryCast-label",
        "type":"label",
        "text":"Format Category"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatCategoryCast",
        "type":"field",
        "value":"${typeinfo.formatCategoryCast}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatOrderingCast-label",
        "type":"label",
        "text":"Format Ordering"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatOrderingCast",
        "type":"field",
        "value":"${typeinfo.formatOrderingCast}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-legendKey-label",
        "type":"label",
        "text":"Legend Key"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-legendKey",
        "type":"select",
        "value":"${typeinfo.legendKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"lastGroupby_operation",
          "value":"lastGroupby_op"
        },{
          "jsonClass":"Option",
          "text":"allGroupby",
          "value":"allGroupby"
        },{
          "jsonClass":"Option",
          "text":"op(ColumnName)",
          "value":"op(ColumnName)"
        },{
          "jsonClass":"Option",
          "text":"ColumnName",
          "value":"ColumnName"
        },{
          "jsonClass":"Option",
          "text":"Format Legend",
          "value":"formatLegend"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatLegendCast-label",
        "type":"label",
        "text":"Format Legend"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatLegendCast",
        "type":"field",
        "value":"${typeinfo.formatLegendCast}",
        "readonly":false
      }]
    }]
  }]
}
========
<<<<<<<=edit-js=
elx.bundle.type.ComboChart = {

  	init : function(view) {
      	  var dataKey = elx.MultiKeyColumnSection.getKeyData(view,view.typeinfo.data.fields.keys);
           var tableKey=  new elx.MultiKeyColumnSection("typeinfo-property-keys","typeinfo-property", view, dataKey);
      $("#typeinfo-property-keys").data("table",tableKey);
            var dataOps =  elx.utils.getElxChartOperablesData(view, view.typeinfo.data.fields.operable.values);
   		var tableOp = new elx.MultiChartValueColumnSection("typeinfo-data-fields-operable-values-table",
                                                        "typeinfo-data-fields-operable-values", view, dataOps);
		$("#typeinfo-data-fields-operable-values-table").data("table",tableOp);
      elx.host.utils.initSectionGroups(view,$("#ComboChart-div"));
	},

	validate : function(view) {
		return true;
	},

	save : function(view) {
		var dataTableOp = $("#typeinfo-data-fields-operable-values-table").data("table");
       var dataOp = dataTableOp.table.getData();
          view.typeinfo.data.fields.operable.values = 
          elx.utils.buildElxChartOperablesData(view.typeinfo.data.fields.operable.values,dataOp);
      
	   var dataTableKey = $("#typeinfo-property-keys").data("table");
        var dataKey = dataTableKey.table.getData();
        view.typeinfo.data.fields.keys = elx.MultiKeyColumnSection.buildKeyData(dataKey);
 
		elx.host.utils.saveProperties(view.typeinfo);
      console.log("Aiyo,view.typeinfo.data.fields.operable.values:",JSON.stringify(view.typeinfo.data.fields.operable.values));
}
}
========
<<<<<<<=view-html=
<style type='text/css'>
</style>
<div id='${id}'>    
  </div>

<div class='elx-script'>
  //http://jsfiddle.net/gh/get/jquery/1.9.1/highslide-software/highcharts.com/tree/master/samples/highcharts/demo/combo/
  //for the single mouseover
  //console.log("${Data}",JSON.stringify(${data}));
  cfgoptions=view.typeinfo;
  //console.log("joh",typeof john);
 
  
  var div =$("#${id}");
 var k=view.typeinfo.data.fields.keys;
  //console.log("kjo",JSON.stringify(k));
   var keys=[];
  var legendKey=view.typeinfo.legendKey;
  var formatLegendCast=view.typeinfo.formatLegendCast;
    k.forEach(function(d,i) {
    keys.push(d.name);})
  //console.log("keysAr",JSON.stringify(keys));
  var columns=[]; var operations=[];
  var t=view.typeinfo.data.fields.operable.values;
    t.forEach(function(d,i) {
  columns.push(d.name);
    operations.push(d.op);
  })

    /* data tab
  
function data(){
    var t=view.typeinfo.data.fields.operable.values;
  	var k=view.typeinfo.data.fields.keys;

  var columns=[]; var operations=[]; var keys=[];
  t.forEach(function(d,i) {
  columns.push(d.name);
    operations.push(d.op);
  })
  k.forEach(function(d,i) {
    keys.push(d.name);})
   return rows.groupBy(keys,columns, operations);
}
data();
   */  
var f=view.typeinfo.data.fields;

 if (view.data.jsonClass === "DataEmbedded"){ 
  rawdata=[["2014-04-20",100],["2012-08-20",60],["2014-12-20",92],["2014-02-20",48],
  ["2014-01-20",32],["2014-07-20",46]];
  //rawdata= [["Apr",100],["Aug",60],["Dec",92],["Feb",48],["Jan",32],["Jul",46],["Jun",92],["Mar",111],["May",120],["Nov",56],["Oct",45],["Sep",44]];
  } else rawdata=${data};
  
  var Set_GroupFn1, Get_CategoryFn,average, chartGen, groupByFn, hexToModel1, smpColName, sum, 
  zeroOrOne_OperableClass;
  var model_TypeSplitClass,model_DataConvertClass,model_APIClass;
  var safeRead; var interpolateMonthFixed;
  var autoDetectCategory,autoSortCategory,formatCategoryCast,formatColumnNameCast;

 debugFn();
  
  //console.log("rawdata",JSON.stringify(rawdata));
  var data1, data2, data3, smpColName;
  data1 = arrToHex(rawdata, f, view);
console.log("data1",JSON.stringify(data1));
  
  data2=interpolateMonthFixed(data1,view);
  
  console.log("data2",JSON.stringify(data2));
  data3 = hexToModel1(data2, legendKey,formatLegendCast,view);
  //console.log("data3:",JSON.stringify(data3));
  var data7=formatCategoryCast(data3,view);
  var data8=sortCategory(data7);
  //console.log("data7",JSON.stringify(data7));
  //console.log("data8",JSON.stringify(data8));
  data4 = sortByMonthFn(data3, view);
  //console.log("data3", JSON.stringify(data3));
  smpColName = _.groupBy(data4, function(d) {
    return d["columnName"];
  });		
  //console.log("initialSmpColName",JSON.stringify(smpColName));
   var toCategoryArray=Get_CategoryFn(smpColName);
  smpGroupby1=_.groupBy(data4,function(d) {
  	return d["groupby1"];
  });
  if ((_.where(data3,{model:'columnStackGroup'})).length>0) {
  smpGroupby1=_.groupBy(data4,function(d) {
  	return d["groupby1"];
  });smpColName={};
  _.each(smpGroupby1,function(t,unit) {
  
  smpColName[unit]=_.groupBy(t,function(d){ return d["columnName"];});
  });
  }
	var toYaxisArray=[];
  var yAxisArr=(view.typeinfo.yAxisArray).split(",");
  set_yAxisFn(data4,toYaxisArray,yAxisArr);
   
  //console.log("smpColName",JSON.stringify(smpColName));
  //console.log("toCategoryArray",JSON.stringify(toCategoryArray));
  var toSeriesArray=[];var output={};model_APIClass={};

  chartGen(smpColName,model_APIClass,output);
  for (var propertyName in output) {
  if (Array.isArray(output[propertyName])==true) {
  _.each(output[propertyName],function(d,i){
  	toSeriesArray.push(d);
  });
  	  }
  	else toSeriesArray.push(output[propertyName]);
  }

  //console.log("output",JSON.stringify(output));
  //console.log("toSeriesArray",JSON.stringify(toSeriesArray));
  //console.log("toYaxisArray",JSON.stringify(toYaxisArray));
  var colorSeriesArray=(view.typeinfo.colorSeriesArray).split(",");
  //console.log("colorSeriesArray",JSON.stringify(colorSeriesArray));
  
      Highcharts.setOptions({
        colors: colorSeriesArray
    });
      $("#${id}").highcharts({
      chart: {
        zoomType: "xy"
  },
      title: {
        text: cfgoptions.title
      },
  tooltip: (safeRead(model_APIClass,'tooltip') == null) ? {} :safeRead(model_APIClass,'tooltip')
        
      ,
      subtitle: {
        text: cfgoptions.subtitle
      },
      xAxis: [
        {
          categories: toCategoryArray
        }
      ],
      yAxis: toYaxisArray,
  labels: {},
      plotOptions: {
        column: {
          pointPadding: 0.2,
          borderWidth: 0,
  		stacking:safeRead(model_APIClass,'plotOptions','column','stacking')
        }
      },
      series: toSeriesArray
    });
  // //console.log("jess",model_APIClass);
 function debugFn(){
    
   interpolateMonthFixed=function(data,view){
  if (view.typeinfo.categoryIsMonthFixed=="Yes") {
  var categoryName; var valueNames=[];
  var monthFormat=d3.time.format("%b");
  var yearFormat=d3.time.format("%Y");
  var dayFormat=d3.time.format("%e");
  
  var fixedCategory=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  for (var propertyName in data[0]) {
  if(propertyName.contains("#{xaxis}") ==true) categoryName=propertyName;
  else  valueNames.push(propertyName);
  }
  //auto detect
  var sampleCategory=data[0][categoryName];
  console.log("sampleCate: ",sampleCategory);
  var autoDetectArray=['parsableDate','month'];
  var detected;
  var detected2='month';
  _.each(autoDetectArray,function(d,i) {
  if (autoDetectCategory[d](sampleCategory)) detected=d; 
   });
   for (var i=0;i< autoDetectArray.lenth;i++){
  var j=autoDetectArray[i];
  if (autoDetectCategory[j](sampleCategory)) {detected=d; 
   break;}
  }
   if (typeof detected =='undefined') detected ='normal';
  //--
  if (detected=='parsableDate') {
  
  var existingCat=_.uniq(_.pluck(data,categoryName));
  var existingCatTemp=[];
  _.each(existingCat,function(d) {
  console.log("Actuuj: ",d);
  var date= new Date(d);
  existingCatTemp.push(monthFormat(date));});
  existingCat=existingCatTemp;}
  else var existingCat=_.uniq(_.pluck(data,categoryName));
  var newCat=_.difference(fixedCategory,existingCat);
  console.log("newCat:",JSON.stringify(newCat));
  var newObj={};

  _.each(newCat,function(d,i) {
  	newObj.categoryName=d;
    _.each(valueNames,function(m,n) {
  	newObj[m]=0;
    });
  });
  
   
  if(jQuery.isEmptyObject(newObj)===false&& detected!=='parsableDate') {data.push(newObj);}
 
  } return data;
  }
  Get_CategoryFn=function(smpColName) {
  _.each(smpColName,function(t,unit){
     if(unit==_.first(Object.keys(smpColName))) {
            var categoryData=_.uniq(_.pluck(t,'category'));
           toCategoryArray=categoryData;
        }
  });
  return toCategoryArray;
  }

   model_TypeSplitClass={
    columnEscortAvgLine:['column','spline'],
    columnEscortSumLine:['column','spline'],
  columnEscortPie:['column',null,'pie'],
    columnNoEscortAvgLine:[,'spline'],
    columnNoEscortSumLine:[,'spline'],
    splineEscortAvgLine:['spline','spline'],
    splineEscortSumLine:['spline','spline'],
    splineNoEscortAvgLine:[,'spline'],
    splineNoEscortSumLine:[,'spline'],
    column:['column'],
    spline:['spline'],
  columnStackGroup:['column'],
  columnStack:['column'],
  columnInducedGroupby:['column']
    };
  model_APIClass={
  
  };

model_DataConvertClass = {
  columnEscortAvgLine: {
    0: function(t,unit, index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = average(valueData);
      return totalValue;
    }
  },
  columnEscortSumLine: {
    0: function(t,unit, index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = sum(valueData);
      return totalValue;
    }
  },
  columnEscortPie: {
    0: function(t,unit, index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {},
    2: function(t, unit,index) {
      var name_pie, totalValue_pie, valueData;
      valueData = _.pluck(t, "value");
      name_pie = _.first(_.pluck(t, "columnName"));
      totalValue_pie = sum(valueData);
      return {
        name: name_pie,
        y: totalValue_pie,
        color: Highcharts.getOptions().colors[index]
      };
    }
  },
  columnNoEscortAvgLine: {
    0: null,
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = average(valueData);
      return totalValue;
    }
  },
  columnNoEscortSumLine: {
    0: null,
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = sum(valueData);
      return totalValue;
    }
  },
  splineEscortAvgLine: {
    0: function(t,unit,index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "spline";
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = average(valueData);
      return totalValue;
    }
  },
  splineEscortSumLine: {
    0: function(t,unit,index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "spline";
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = sum(valueData);
      return totalValue;
    }
  },
  splineNoEscortAvgLine: {
    0: null,
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = average(valueData);
      return totalValue;
    }
  },
  splineNoEscortSumLine: {
    0: null,
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = sum(valueData);
      return totalValue;
    }
  },
  column: {
    0: function(t,unit, index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel));
      return colToSeriesArr;
    }
  },
  spline: {
    0: function(t,unit,index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "spline";
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel));
      return colToSeriesArr;
    }
  },
  columnStackGroup:{
  0: function(t,unit,index,index2) {
  //console.log("columnStakc,t",JSON.stringify(t));
  //console.log("index2",index2);
  var ShowInLegend_bool=false;
  if(index==0) ShowInLegend_bool=true;
   var valueData=_.pluck(t,'value');
      var columnNameData=_.first(_.pluck(t,'legendKey'));
   colToSeriesArr={type:'column', name:columnNameData,
  data:valueData, stack:unit,
  color: Highcharts.getOptions().colors[index2],
  showInLegend:ShowInLegend_bool
  };
  model_APIClass['plotOptions']={};
  model_APIClass.plotOptions['column']={};
  model_APIClass.plotOptions.column['stacking']='normal';
  model_APIClass['tooltip']={
                      formatter: function() {
                    return '&lt;b&gt;'+ this.x +'&lt;/b&gt;&lt;br/&gt;'+
                        this.series.name +': '+ this.y +'&lt;br/&gt;'+
                          '&lt;br&gt;'+'Total: '+ this.point.stackTotal+'&lt;/br&gt;'+
						'&lt;br&gt;'+this.series.userOptions.stack+'&lt;/br&gt;';
                }
            };
  return colToSeriesArr;
  }
  }, columnStack:{
  0:function(t,unit,index) {
  
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel));
       
 //console.log("jess1kl1",model_APIClass);
  model_APIClass['plotOptions']={};
  model_APIClass.plotOptions['column']={};
  model_APIClass.plotOptions.column['stacking']='normal';
  model_APIClass['tooltip']={
                      formatter: function() {
                    return '&lt;b&gt;'+ this.x +'&lt;/b&gt;&lt;br/&gt;'+
                        this.series.name +': '+ this.y +'&lt;br/&gt;'+
                          '&lt;br&gt;'+'Total: '+ this.point.stackTotal+'&lt;/br&gt;'+
						'&lt;br&gt;';
                }
            };
  return colToSeriesArr;
  }
  }, columnInducedGroupby:{
  0:function(t,unit,index){
  //describle how column is induced.
  //stockType is fast when value is more than 90 and it will be red.
   var colToSeriesArr, gCount, subModel;
      subModel = "column";
  gCount = Get_groupCountFn(t);
  var groupByPropName='groupby'+(gCount+1);
  //console.log("t i know",JSON.stringify(t));
  _.each(t,function(d,i) {
  d[groupByPropName]= (d.value>=90) ? 'Fast':'Slow';
  
  });
  //console.log("t i know new",JSON.stringify(t));
  colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount+1, subModel));
  //console.log("ColToSeries I know",JSON.stringify(colToSeriesArr));
  return colToSeriesArr;
  	}
  }
  		
};


  //$$$
 
  

chartGen = function(smpColName, model_APIClass, output) {
    var index;
    index = 0;
    _.each(smpColName, function(t, unit) {
        var columnName, modelType, propertyName, splitModel, yAxisNum;
        modelType = _.first(_.pluck(t, "model"));
        columnName = unit;
        propertyName = modelType + "_" + columnName;

        if (typeof modelType != 'undefined') {
            //console.log("typeof", typeof modelType);
            yAxisNum = parseInt(numDivFn(_.first(_.pluck(t, 'yAxis')))) - 1;
            splitModel = model_TypeSplitClass[modelType];
            //console.log("splitModel", splitModel);
            _.each(splitModel, function(subModel, n) {
                if (subModel !== null) {

                    zeroOrOne_OperableClass[n].Init(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output);
				
  				 zeroOrOne_OperableClass[n].Draw(t, unit, index, output);
                }
            });
            index++;
        } else {
            smpColName = t;
            //console.log("newSmpColName", JSON.stringify(t));
            var index2 = 0;
            _.each(smpColName, function(t, unitSec) {
                var columnName, modelType, propertyName, splitModel, yAxisNum;
                modelType = _.first(_.pluck(t, "model"));
                columnName = _.first(_.pluck(t, "columnName"));
                propertyName = modelType + "_" + columnName;
                yAxisNum = parseInt(numDivFn(_.first(_.pluck(t, 'yAxis')))) - 1;
                splitModel = model_TypeSplitClass[modelType];
                //console.log("splitModel", splitModel);
                _.each(splitModel, function(subModel, n) {
                    if (subModel !== null) {

                        zeroOrOne_OperableClass[n].Init(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output);
                        //console.log("output", output);
                        zeroOrOne_OperableClass[n].Draw(t, unit, index, output, index2);
                    }

                });
                index2++;
            });
            index++;
        }
    });
};

Set_GroupFn1 = function(data, groupCount, subModel) {
    var groupCountArr, groupProp, nest, outNest, output, uniqCategory;
    groupCountArr = d3.range(0, groupCount);
    groupProp = [];
    groupCountArr.forEach(function(d, i) {
        groupProp.push("groupby" + (d + 1));
    });
    //console.log("groupProp", JSON.stringify(groupProp));
    uniqCategory = _.uniq(_.pluck(data, "category"));
    nest = d3.nest();
    output = [];
    groupProp.forEach(function(d, i) {
        nest = nest.key(function(k) {
            return k[d];
        }).rollup(function(k) {
            var Num, catDiff, columnD, finalObj, groupby1D, lastD, localCategory, smp, sorted_k, valueD, yAxisD;
            columnD = _.first(_.pluck(k, "columnName"));
            groupby1D = _.first(_.pluck(k, "groupby1"));
            lastD = _.first(_.pluck(k, "legendKey"));
            Num = parseInt(numDivFn(_.first(_.pluck(k, "yAxis"))));
            yAxisD = _.first(_.pluck(k, "yAxis"));
            localCategory = _.pluck(k, "category");
            catDiff = _.difference(uniqCategory, localCategory);
            catDiff.forEach(function(a, b) {
                k.push({
                    model: subModel,
                    yAxis: yAxisD,
                    columnName: columnD,
                    value: 0,
                    legendKey: lastD,
                    category: a
                });
            });
            sorted_k = sortByArrayFn(k, uniqCategory);
            valueD = [];
            smp = _.groupBy(sorted_k, function(d) {
                return d["category"];
            });
            _.each(smp, function(l, unit) {
                var value;
                value = sum(_.pluck(l, "value"));
                valueD.push(value);
            });
            finalObj = {
                type: subModel,
                yAxis: yAxisD,
                data: valueD,
                name: lastD,
                yAxis: Num - 1
            };
            output.push(finalObj);
            return finalObj;
        });
    });
    outNest = nest.entries(data);
  if (groupCount===0){
  yAxisD = _.first(_.pluck(data, "yAxis"));
  var lastD = _.first(_.pluck(data, "legendKey"));
  var sorted_k = sortByArrayFn(data, uniqCategory);
  var valueD = [];
  smp = _.groupBy(sorted_k, function(d) {
                return d["category"];
            });
            _.each(smp, function(l, unit) {
                var value;
                value = sum(_.pluck(l, "value"));
                valueD.push(value);
            });
  var Num = parseInt(numDivFn(_.first(_.pluck(data, "yAxis"))));
  output=[{type:subModel,yAxis:yAxisD,data:valueD,name:lastD,yAxis:Num-1}];
  }
    return output;
};

groupByFn = function(data, groupByArr, modelFunction) {
    var aggreData, nest, rolledup;
    nest = d3.nest();
    aggreData = [];
    _.each(groupByArr, function(m, n) {
        nest.key(function(d) {
            return d[m];
        });
    });
    rolledup = nest.rollup(function(d) {});
};

hexToModel1 = function(data, legendKey,formatLegendCast,view) {
    var ReadArray, columnNameArray, model_keyArray, objKey;
    ReadArray = [];
  
    objKey = Object.keys(data[0]);
    model_keyArray = [];
    columnNameArray = [];
  
  //legendFormating
  var formatLegend; //formatLegend should be a class containing the Legend format for each model 
  if (formatLegendCast==="" && legendKey==="formatLegend")
   console.info("Enter formatLegend");
   if (legendKey==="formatLegend" && formatLegendCast!="") {
  console.info("proceed");
  console.log('formatLegendCast',formatLegendCast);
  eval(formatLegendCast);} 
   console.log("tyty",view.typeinfo.data.fields.operable.values[0].id);
  if (view.typeinfo.data.fields.operable.values[0].id==="columnInducedGroupby.L1" 
  && formatLegendCast==="")
  {
  
  formatLegend={'columnInducedGroupby.L1': function(dataZero) {   return dataZero.columnNameWithoutOp;   } };
  }
  
  //-end legendFormating
    objKey.forEach(function(key) {
        var columnNameObj, model_keyObj;
        if (key.contains("#[") === true) {
            model_keyObj = key.replace(/.*\[|\]/g, "");
            columnNameObj = key.replace(/\#.*/, "");
        } else {
            return;
        }
        model_keyArray.push(model_keyObj);
        columnNameArray.push(columnNameObj);
    });
    data.forEach(function(d, i) {
        var Category, ColumnName, GroupNameArr, Model, ReadObj, Value, lastGroupby, propertyName;
        ReadObj = {};
        Value = void 0;
        ColumnName = void 0;
        Category = void 0;
        Model = void 0;
        lastGroupby = void 0;
        GroupNameArr = [];
        for (propertyName in d) {
            if (propertyName.contains("xaxis") === true) {
                Category = d[propertyName];
            }
            if (propertyName.contains("groupby") === true) {
                lastGroupby = d[propertyName];
                GroupNameArr.push(lastGroupby);
            }
        }
  		var dataZero=[];
  console.log('dataZero',dataZero);
        columnNameArray.forEach(function(modelKey,i) {
            var allGroupby, cName, lastGroupby_op, model_keyObj, model_keyObjArr, model_yAxisObj, objPush;
            for (propertyName in d) {
                if (propertyName.contains(modelKey) === true) {
                    model_keyObj = propertyName.replace(/.*\[|\]/g, "");
                    model_keyObjArr = model_keyObj.split(".");
                    model_yAxisObj = (model_keyObjArr.length > 1 ? model_keyObjArr[1] : "L1");
                    cName = propertyName.replace(/\#.*/, "");
                  // for taking string in brackets
                  var regExp = /\(([^)]+)\)/;
                  var matches=regExp.exec(cName);
                  columnNameWithoutOp=matches[1];
                  opName=cName.split("(")[0];
                  //-end
                    objPush = {
                        model: model_keyObjArr[0],
                        yAxis: model_yAxisObj,
                        columnName: cName,
  						columnNameWithoutOp:columnNameWithoutOp,
  						opName:opName,
                        value: d[propertyName],
                        category: Category
                    };
                    GroupNameArr.forEach(function(d, i) {
  					
                        propertyName = "groupby" + (i + 1);
                        objPush[propertyName] = d;
                    });
  					if(i===0) {console.log("objPush for Legend",JSON.stringify(objPush));}
                    if (legendKey === "lastGroupby_op") {
                        lastGroupby_op = lastGroupby + "_" + cName;
                        objPush["legendKey"] = lastGroupby_op;
                        ReadArray.push(objPush);
                    } else if (legendKey === "allGroupby") {
                        allGroupby = GroupNameArr.join("_");
                        objPush["legendKey"] = allGroupby;
                        ReadArray.push(objPush);
                    } else if (legendKey == "op(ColumnName)") {
                        objPush["legendKey"] = cName;
                        ReadArray.push(objPush);
                      } else if (legendKey=="formatLegend"){
                      console.log("model_keyObj",model_keyObj);
                      objPush["legendKey"] = formatLegend[model_keyObj](objPush);
  						ReadArray.push(objPush);
                      }
  
  						else if (legendKey == "ColumnName") {
                        var regExp = /\(([^)]+)\)/;
                        var matches = regExp.exec(cName);
                        //console.log("cName:", matches[1]);
                        objPush["legendKey"] = matches[1];
                        ReadArray.push(objPush);
                    }
                }
            }
        });
    }); 
    return ReadArray; 
};

sum = function(arr) {
    return _.reduce(arr, (function(memo, num) {
        return memo + num;
    }), 0);
};

average = function(arr) {
    return _.reduce(arr, function(memo, num) {
        return memo + num;
    }, 0) / arr.length;
};

zeroOrOne_OperableClass = {
  0: { //normal
        Init: function(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output, index2) {
            var propertyName;
            //console.log("Initi: ", modelType);
            propertyName = modelType + "_" + columnName + "_0:" + unit;
            output[propertyName] = {};
        },
        Draw: function(d, unit, index, initialized, index2) {
            var columnName, modelType, propertyName;
            modelType = _.first(_.pluck(d, "model"));
            columnName = _.first(_.pluck(d, "columnName"));
            propertyName = modelType + "_" + columnName + "_0:" + unit;
            initialized[propertyName] = model_DataConvertClass[modelType][0](d, unit, index, index2);
        }
    },
  1: { //for Average lines
        Init: function(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output) {

            var propertyName;
            propertyName = modelType + "_" + columnName + "_1";
            output[propertyName] = {
                type: subModel,
                name: columnName,
                data: [],

                marker: {
                    lineWidth: 2,
                    lineColor: Highcharts.getOptions().colors[yAxisNum],
                    fillColor: 'white'
                },
                dataURL: safeRead(model_APIClass, modelType, 'dataUR'),
                id: safeRead(model_APIClass, modelType, 'id'),
                index: safeRead(model_APIClass, modelType, 'index'),
                legendIndex: safeRead(model_APIClass, modelType, 'legendIndex'),
                stack: safeRead(model_APIClass, modelType, 'stack'),
                xAxis: safeRead(model_APIClass, modelType, 'xAxis'),
                yAxis: yAxisNum,
                zIndex: safeRead(model_APIClass, modelType, 'zIndex')
            };
            //console.log("one,output", JSON.stringify(output));
        },
        Draw: function(d, unit, index, initialized) {
            //console.log("dara", JSON.stringify(d));

            var smpCat;
            smpCat = _.groupBy(d, function(d) {
                return d["category"];
            });
            //console.log("smpCat", JSON.stringify(smpCat));
            _.each(smpCat, function(t, unit) {
                var columnName, modelType, propertyName;
                modelType = _.first(_.pluck(t, "model"));
                columnName = _.first(_.pluck(t, "columnName"));
                propertyName = modelType + "_" + columnName + "_1";
                initialized[propertyName].data.push(model_DataConvertClass[modelType][1](t, unit, index));
            });

        }
    },
  2: { //for pies
        Init: function(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output) {
            var propertyName;
            propertyName = "pie";
            if (_.has(output, propertyName) == false) {
                output[propertyName] = {

                    type: "pie",
                    name: "pie",
                    data: [],
                    center: [50, 80],
                    size: 100,
                    showInLegend: false,
                    dataLabels: {
                        enabled: false
                    }

                };
            }
        },
        Draw: function(d, unit, index, initialized) {
            var columnName, modelType, propertyName;
            modelType = _.first(_.pluck(d, "model"));
            columnName = _.first(_.pluck(d, "columnName"));
            propertyName = "pie";
            initialized[propertyName].data.push(model_DataConvertClass[modelType][2](d, unit, index));
        }
    },
  3: { //for group and stack
        Init: function(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output) {
            var propertyName;
            propertyName = "pie";
            if (_.has(output, propertyName) == false) {
                output[propertyName] = {
                    type: "pie",
                    name: "pie",
                    data: [],
                    center: [50, 80],
                    size: 100,
                    showInLegend: false,
                    dataLabels: {
                        enabled: false
                    }

                };
            }
        },
        Draw: function(d, unit, index, initialized) {
            var columnName, modelType, propertyName;
            modelType = _.first(_.pluck(d, "model"));
            columnName = _.first(_.pluck(d, "columnName"));
            propertyName = "pie";
            initialized[propertyName].data.push(model_DataConvertClass[modelType][2](d, unit, index));
        }

    }
};
safeRead = function() {
    var current, formatProperty, obj, prop, props, val, _i, _len;

    obj = arguments[0], props = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];

    read = function(obj, prop) {
        if ((obj != null ? obj[prop] : void 0) == null) {
            return;
        }
        return obj[prop];
    };

    current = obj;
    for (_i = 0, _len = props.length; _i < _len; _i++) {
        prop = props[_i];

        if (val = read(current, prop)) {
            current = val;
        } else {
            return undefined;
        }
    }
    return current;
};
 

  autoDetectCategory={
  "parsableDate":function(d) {
  //accepts "yyyy-mm-dd","Jul 20,2014"
  var date=new Date(d);
  return date instanceof Date && !isNaN(date.valueOf());
    },
  "month":function(d) { var date=new Date(d+" 2,2014");
  console.log("date",date);
  return date instanceof Date && !isNaN(date.valueOf());}
  };
  
  
  autoSortCategory = {
    // add additional column (ordering) to determine the order of the category,
    //if there are similar category
    "parsableDate": {
        "month": function(modelData) {
  
            var monthFormat = d3.time.format("%b");
            var yearFormat = d3.time.format("%Y");
            var autoArr = [];
            _.each(modelData, function(d) {
  
                var autoObj = d;
                var date = new Date(d.category);
   				var month = monthFormat(date);
                  var year = yearFormat(date);
   
                
                autoObj['category'] = month;
                autoObj['ordering'] = (new Date(month + ' 15,' + year)).getTime() / 1000;
                autoObj['actual'] = d.category;
                autoArr.push(autoObj);
            });
            return autoArr;
        },
        "day": function(modelData) {
            var dayFormat = d3.time.format("%e");
            var monthFormat = d3.time.format("%b");
            var yearFormat = d3.time.format("%Y");
            var autoArr = [];
            _.each(modelData, function(d) {
                var autoObj = d;
                var day = dayFormat(d.category);
                var year = yearFormat(d.category);
                var month = monthFormat(d.category);
                autoObj['category'] = day;
                autoObj['ordering'] = (new Date(month + ' ' + day + ', ' + year)).getTime() / 1000;
                autoObj['actual'] = d.category;
                autoArr.push(autoObj);
            });
            return autoArr;

        },
        cast: {}

    },
    "month": function(modelData) {
        var autoArr = [];
        var priority_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        _.each(modelData, function(d) {
            var autoObj = d;
            autoObj['ordering'] = priority_order.indexOf(d.category);
            autoObj['actual'] = d.category;
            autoArr.push(autoObj);
        });
        return autoArr;

  },"normal":function(modelData){
return modelData;
  }

};
  
  formatCategoryCast= function(modelData,view) {
  //Data preProcess
  var formatScale;
  var testArray=["2012-11-25","Jan","Peter","Jan-2014"];
  var sampleCategory=modelData[0].category;
  var autoDetectArray=['parsableDate','month'];
  var detected;
  var detected2='month';
  _.each(autoDetectArray,function(d,i) {
  if (autoDetectCategory[d](sampleCategory)) detected=d; 
   });
  
  for (var i=0;i< autoDetectArray.lenth;i++){
  var j=autoDetectArray[i];
  if (autoDetectCategory[j](sampleCategory)) {detected=d; 
   break;}
  }
   if (typeof detected =='undefined') detected ='normal';
 var formatCategory,formatOrdering; 
  
  if (view.typeinfo.formatCategoryCast !=="" && view.typeinfo.formatOrderingCast!=="") {
  var autoArr=[];
  eval(view.typeinfo.formatCategoryCast);//formatCategory=function(d){return..}
  eval(view.typeinfo.formatOrderingCast);
  _.each(modelData,function(m,n) {
  var autoObj=m;  
  var d=m.category;
    autoArr['ordering']=formatOrdering(d); autoArr['category']=formatCategory(d);
  });
 
   } 
  
  else {
  console.log("detected",detected);
  
  if(detected=='parsableDate') {
  console.log("detected2",detected2);
  var autoArr=autoSortCategory[detected][detected2](modelData);}
  else var autoArr=autoSortCategory[detected](modelData);}
  return autoArr;
  };
  sortCategory= function(orderedData){
  if( typeof orderedData[0].ordering!=='undefined') {
  orderedData.sort(function(a,b) {
  return a.ordering-b.ordering;
  }); return orderedData;} else return orderedData;
  };
  
  formatInterpolateCast=function(hexData,view){
  var detectable;
  for (var propertyName in hexData[0]) if (propertyName.contains("#{xaxis}")==true) {
  detectable=hexData[0][propertyName];}
  
  
  };

}

</div>
========