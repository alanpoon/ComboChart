<<<<<<<=view-json=
{
  "id":"ComboChart",
  "name":"ComboChart",
  "category":"Chart",
  "default":{
    "jsonClass":"View",
    "elxType":"View",
    "vtype":"bundle",
    "state":"visible",
    "isContainer":false,
    "position":{
      "jsonClass":"Position",
      "elxType":"Position",
      "height":"480",
      "width":"600",
      "zIndex":"auto"
    },
    "data":{
      "jsonClass":"DataEmbedded",
      "datasource":{
        "jsonClass":"DataSource",
        "name":"initData",
        "stype":"Data",
        "desc":"default data",
        "schema":{
          "jsonClass":"Schema",
          "caseSensitive":false,
          "columns":[{
            "jsonClass":"SchemaColumn",
            "name":"Maintenance",
            "dtype":"Double",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Diesel",
            "dtype":"Double",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Manpower",
            "dtype":"Double",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Categories",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Employees",
            "dtype":"String",
            "attrs":[]
          }]
        },
        "data":{
          "jsonClass":"DataRecords",
          "records":[{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":49.9
            },{
              "jsonClass":"Field",
              "value":7
            },{
              "jsonClass":"Field",
              "value":24
            },{
              "jsonClass":"Field",
              "value":"Jan"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":71.5
            },{
              "jsonClass":"Field",
              "value":6.9
            },{
              "jsonClass":"Field",
              "value":14
            },{
              "jsonClass":"Field",
              "value":"Feb"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":106.4
            },{
              "jsonClass":"Field",
              "value":9.5
            },{
              "jsonClass":"Field",
              "value":21
            },{
              "jsonClass":"Field",
              "value":"Mar"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":129.2
            },{
              "jsonClass":"Field",
              "value":14.5
            },{
              "jsonClass":"Field",
              "value":57
            },{
              "jsonClass":"Field",
              "value":"Apr"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":144
            },{
              "jsonClass":"Field",
              "value":18.2
            },{
              "jsonClass":"Field",
              "value":8
            },{
              "jsonClass":"Field",
              "value":"May"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":176
            },{
              "jsonClass":"Field",
              "value":21.5
            },{
              "jsonClass":"Field",
              "value":12
            },{
              "jsonClass":"Field",
              "value":"Jun"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":135.6
            },{
              "jsonClass":"Field",
              "value":25.2
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Jul"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":148.5
            },{
              "jsonClass":"Field",
              "value":26.5
            },{
              "jsonClass":"Field",
              "value":67
            },{
              "jsonClass":"Field",
              "value":"Aug"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":216.4
            },{
              "jsonClass":"Field",
              "value":23.3
            },{
              "jsonClass":"Field",
              "value":53
            },{
              "jsonClass":"Field",
              "value":"Sep"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":194.1
            },{
              "jsonClass":"Field",
              "value":18.3
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Oct"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":95.6
            },{
              "jsonClass":"Field",
              "value":13.9
            },{
              "jsonClass":"Field",
              "value":29
            },{
              "jsonClass":"Field",
              "value":"Nov"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":54.4
            },{
              "jsonClass":"Field",
              "value":9.6
            },{
              "jsonClass":"Field",
              "value":18.2
            },{
              "jsonClass":"Field",
              "value":"Dec"
            },{
              "jsonClass":"Field",
              "value":"Employee1"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":43
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":15
            },{
              "jsonClass":"Field",
              "value":"Jan"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":63
            },{
              "jsonClass":"Field",
              "value":34
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Feb"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":12
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Mar"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":52
            },{
              "jsonClass":"Field",
              "value":12
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Apr"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":21
            },{
              "jsonClass":"Field",
              "value":35
            },{
              "jsonClass":"Field",
              "value":6
            },{
              "jsonClass":"Field",
              "value":"May"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":53
            },{
              "jsonClass":"Field",
              "value":8
            },{
              "jsonClass":"Field",
              "value":"Jun"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":106.4
            },{
              "jsonClass":"Field",
              "value":9.5
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Jul"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":129.2
            },{
              "jsonClass":"Field",
              "value":14.5
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Aug"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":144
            },{
              "jsonClass":"Field",
              "value":18.2
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Sep"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":176
            },{
              "jsonClass":"Field",
              "value":21.5
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Oct"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":106.4
            },{
              "jsonClass":"Field",
              "value":9.5
            },{
              "jsonClass":"Field",
              "value":45
            },{
              "jsonClass":"Field",
              "value":"Nov"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          },{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":129.2
            },{
              "jsonClass":"Field",
              "value":14.5
            },{
              "jsonClass":"Field",
              "value":23
            },{
              "jsonClass":"Field",
              "value":"Dec"
            },{
              "jsonClass":"Field",
              "value":"Employee2"
            }]
          }]
        }
      },
      "hint":"directive-data-array",
      "directive":"ZnVuY3Rpb24gZGF0YSgpew0KdmFyIGNUb2dnbGVUeXBlPXZpZXcudHlwZWluZm8uZGF0YS5maWVsZHMuY1RvZ2dsZVR5cGVDb2w7DQogICAgdmFyIHQ9dmlldy50eXBlaW5mby5kYXRhLmZpZWxkcy5vcGVyYWJsZS52YWx1ZXM7DQogIAl2YXIgaz12aWV3LnR5cGVpbmZvLmRhdGEuZmllbGRzLmtleXM7DQoNCiAgdmFyIGNvbHVtbnM9W107IHZhciBvcGVyYXRpb25zPVtdOyB2YXIga2V5cz1bXTsNCiAga2V5cy5wdXNoKGNUb2dnbGVUeXBlWzBdLm5hbWUpOw0KICB0LmZvckVhY2goZnVuY3Rpb24oZCxpKSB7DQogIGNvbHVtbnMucHVzaChkLm5hbWUpOw0KICAgIG9wZXJhdGlvbnMucHVzaChkLm9wKTsNCiAgfSkNCiAgay5mb3JFYWNoKGZ1bmN0aW9uKGQsaSkgew0KICAgIGtleXMucHVzaChkLm5hbWUpO30pDQogICByZXR1cm4gcm93cy5ncm91cEJ5KGtleXMsY29sdW1ucywgb3BlcmF0aW9ucyk7DQp9DQpkYXRhKCk7"
    },
    "typeinfo":{
      "jsonClass":"Bundle",
      "type":"ComboChart",
      "data":{
        "series":{
          "sort":"series-asc"
        },
        "keys":{
          "sort":"key-asc"
        },
        "fields":{ 
          "cToggleTypeCol":[
                  {
                     "name":"Employees"
                  }
               ],
          "keys":[{
            "name":"Categories"
          }],
          "operable":{
            "values":[{
              "id":"columnStack.L1",
              "name":"Tonnage",
              "op":"sum"
            }]
          }
        }
      },
      "width":500,
      "height":510,
      "dataGroupKey":"timePeriodOptions",
      "title":"Average Monthly R_column and R_splime in Tokyo",
      "subtitle":"Source: WorldClimate.com",
      "yAxisArray":"Title1,Title2",
      "colorSeriesArray":"#7cb5ec,#434348,#90ed7d,#f7a35c,#ffc0cb,#f15c80,#e4d354,#8085e8,#8d4653,#91e8e1,#d89b00,#9fb27e,#c6c6cd,#284040,#5ead06",
      "interpolateXAxisKey":"default",
      "seriesInsertKey":"default",
      "formatSeriesInsertCast":"",
      "xTicksKey":"string",
      "formatXTicksCast":"",
      "orderingKey":"monthString",
      "formatOrderingCast":"",
      "interpolateGroupbyKey":"default",
      "fixedGroupbyClassCast":"fixedGroupbyClass={'groupby1':['asd']}",
      "formatLegendCast":"formatLegend={'columnInducedGroupby.L1': function(dataZero) {   return dataZero.columnNameWithoutOp;   } };",
      "legendKey":"ColumnName",
      "cToggleKey":"cToggleEnabled",
           "toolTipKey":"default",
      "legendEscortLines":"Gross Profit",
      "typeAntiType":"",
      "formatToolTipCast":"formatToolTip={'columnInducedGroupby.L1':{valueDecimals:2,valuePrefix:'$',valueSuffix:' USD'}}",
      "inducedKey":"default",
      "formatInducedCast":"",
      "valueOperationKey":"default",
      "formatValueOperationCast":"operation.prototype.value=function(){ return [this.A-this.B];}",
      "formatValueOperationArg":"A"
    }
  },
  "includes":["/elx/lib/highcharts.js","/elx/lib/Accent2.js","/elx/lib/highchartExporting.js","/elx/lib/multiSelectCustom.js"],
  "edit-section":[{
    "id":"view",
    "name":"View"
  },{
    "id":"data",
    "name":"Data"
  },{
    "id":"ComboChart",
    "name":"ComboChart"
  },{
    "id":"filters",
    "name":"Filters"
  }]
}
========
<<<<<<<=edit-json=
{
  "jsonClass":"ViewSectionGroup",
  "id":"ComboChart",
  "groups":[{
    "jsonClass":"Group",
    "label":"Data",
    "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-height-label",
        "type":"label",
        "text":"Chart Height"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-height",
        "type":"field",
        "value":"${typeinfo.height}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-width-label",
        "type":"label",
        "text":"Chart Width"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-width",
        "type":"field",
        "value":"${typeinfo.width}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-centre-label",
        "type":"label",
        "text":"Chart centre"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-centre",
        "type":"field",
        "value":"${typeinfo.centre}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-property-label",
        "type":"label",
        "text":"Keys"
      },{
        "jsonClass":"Div",
        "id":"typeinfo-property"
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-data-fields-operable-values-label",
        "type":"label",
        "text":"Column"
      },{
        "jsonClass":"Div",
        "id":"typeinfo-data-fields-operable-values"
      }]
    }]
  },{"jsonClass":"Group",
       "label":"Data Grouping",
       "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-dataGroupKey-label",
        "type":"label",
        "text":"Data Group"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-dataGroupKey",
        "type":"select",
        "value":"${typeinfo.dataGroupKey}",
		    "options":[{
          "jsonClass":"Option",
          "text":"default",
          "value":"default"
        },{
          "jsonClass":"Option",
          "text":"Time Period Options",
          "value":"timePeriodOptions"
        }]
      }]
       }]}
      ,{
    "jsonClass":"Group",
    "label":"Title",
    "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-title-label",
        "type":"label",
        "text":"Title"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-title",
        "type":"field",
        "value":"${typeinfo.title}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-subtitle-label",
        "type":"label",
        "text":"Subtitle"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-subtitle",
        "type":"field",
        "value":"${typeinfo.subtitle}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-yAxisArray-label",
        "type":"label",
        "text":"YAxis Array"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-yAxisArray",
        "type":"field",
        "value":"${typeinfo.yAxisArray}",
        "readonly":false
      }]
    }]
  },
    {"jsonClass":"Group",
       "label":"Color",
       "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-colorSeriesArray-label",
        "type":"label",
        "text":"Color Series Array"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-colorSeriesArray",
        "type":"field",
        "value":"${typeinfo.colorSeriesArray}",
        "readonly":false
      }]
       }]}
      ,{"jsonClass":"Group",
         "label":"x Axis",
      "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-interpolateXAxisKey-label",
        "type":"label",
        "text":"interpolate Xaxis"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-interpolateXAxisKey",
        "type":"select",
        "value":"${typeinfo.interpolateXAxisKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"default",
          "value":"default"
        },{
          "jsonClass":"Option",
          "text":"all month",
          "value":"allMonth"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-seriesInsertKey-label",
        "type":"label",
        "text":"Insert Series Key"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-seriesInsertKey",
        "type":"select",
        "value":"${typeinfo.seriesInsertKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"default",
          "value":"default"
        },{
          "jsonClass":"Option",
          "text":"Format Series Insert Key",
          "value":"formatSeriesInsertCast"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatSeriesInsertCast-label",
        "type":"label",
        "text":"Format Series"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatSeriesInsertCast",
        "type":"field",
        "value":"${typeinfo.formatSeriesInsertCast}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-xTicksKey-label",
        "type":"label",
        "text":"XTicks Key"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-xTicksKey",
        "type":"select",
        "value":"${typeinfo.xTicksKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"month string",
          "value":"%b"
        },{
          "jsonClass":"Option",
          "text":"dd-mm-yyyy",
          "value":"%d-%m-%Y"
        },{
          "jsonClass":"Option",
          "text":"string",
          "value":"string"
        },{
          "jsonClass":"Option",
          "text":"format XTicks Cast",
          "value":"formatXTicksCast"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatXTicksCast-label",
        "type":"label",
        "text":"Format XTicks"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatXTicksCast",
        "type":"field",
        "value":"${typeinfo.formatXTicksCast}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-orderingKey-label",
        "type":"label",
        "text":"Ordering Key"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-orderingKey",
        "type":"select",
        "value":"${typeinfo.orderingKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"month string",
          "value":"monthString"
        },{
          "jsonClass":"Option",
          "text":"year-month",
          "value":"year-month"
        },{
          "jsonClass":"Option",
          "text":"month-year",
          "value":"month-year"
        },{
          "jsonClass":"Option",
          "text":"alphabetical",
          "value":"alphabetical"
        },{
          "jsonClass":"Option",
          "text":"date",
          "value":"date"
        },{
          "jsonClass":"Option",
          "text":"value Descending",
          "value":"valueDescending"
        },{
          "jsonClass":"Option",
          "text":"value Ascending",
          "value":"valueAscending"
        },{
          "jsonClass":"Option",
          "text":"format ordering cast",
          "value":"formatOrderingCast"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatOrderingCast-label",
        "type":"label",
        "text":"Format Ordering"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatOrderingCast",
        "type":"field",
        "value":"${typeinfo.formatOrderingCast}",
        "readonly":false
      }]
    }]},
    {"jsonClass":"Group",
       "label":"Groupby",
       "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-interpolateGroupbyKey-label",
        "type":"label",
        "text":"Interpolate Groupby key"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-interpolateGroupbyKey",
        "type":"select",
        "value":"${typeinfo.interpolateGroupbyKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"default",
          "value":"default"
        },{
          "jsonClass":"Option",
          "text":"Construct classes for Interpolation",
          "value":"interpolateGroupbyKey"
        }]
      }]
       },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-fixedGroupbyClassCast-label",
        "type":"label",
        "text":"Format FixedGroupbyClass"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-fixedGroupbyClassCast",
        "type":"field",
        "value":"${typeinfo.fixedGroupbyClassCast}",
        "readonly":false
      }]
    }]}
      ,{"jsonClass":"Group","label":"Legend",
      "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-legendKey-label",
        "type":"label",
        "text":"Legend Key"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-legendKey",
        "type":"select",
        "value":"${typeinfo.legendKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"lastGroupby_operation",
          "value":"lastGroupby_op"
        },{
          "jsonClass":"Option",
          "text":"allGroupby",
          "value":"allGroupby"
        },{
          "jsonClass":"Option",
          "text":"op(ColumnName)",
          "value":"op(ColumnName)"
        },{
          "jsonClass":"Option",
          "text":"ColumnName",
          "value":"ColumnName"
        },{
          "jsonClass":"Option",
          "text":"Format Legend",
          "value":"formatLegend"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatLegendCast-label",
        "type":"label",
        "text":"Format Legend"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatLegendCast",
        "type":"field",
        "value":"${typeinfo.formatLegendCast}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-legendEscortLines-label",
        "type":"label",
        "text":"Legends for Escort Lines $/type/"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-legendEscortLines",
        "type":"field",
        "value":"${typeinfo.legendEscortLines}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-typeAntiType-label",
        "type":"label",
        "text":"Type and AntiType for chart Toggle"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-typeAntiType",
        "type":"field",
        "value":"${typeinfo.typeAntiType}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-cToggleKey-label",
        "type":"label",
        "text":"cToggleKey"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-cToggleKey",
        "type":"select",
        "value":"${typeinfo.cToggleKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"default",
          "value":"default"
        },{
          "jsonClass":"Option",
          "text":"Enable Chart Toggle",
          "value":"cToggleEnabled"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-cToggleTypeCol-label",
        "type":"label",
        "text":"Chart Toggle Type"
      },{
      "jsonClass":"SchemaColumnSelect",
      "id":"typeinfo-data-cToggleTypeCol",
      "type":"select-schema-column",
      "value":"${typeinfo.data.cToggleTypeCol}"
    }]
    }]}
      ,{"jsonClass":"Group",
        "label":"ToolTip",
        "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-toolTipKey-label",
        "type":"label",
        "text":"Tool Tip Key"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-toolTipKey",
        "type":"select",
        "value":"${typeinfo.toolTipKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"default",
          "value":"default"
        },{
          "jsonClass":"Option",
          "text":"Format toolTip",
          "value":"formatToolTip"
        },{
          "jsonClass":"Option",
          "text":"columnStackGroup",
          "value":"columnStackGroup"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatToolTipCast-label",
        "type":"label",
        "text":"Format Tooltip"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatToolTipCast",
        "type":"field",
        "value":"${typeinfo.formatToolTipCast}",
        "readonly":false
      }]
    }]
  },{"jsonClass":"Group",
        "label":"Column Induced Groupby",
        "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-inducedKey-label",
        "type":"label",
        "text":"Induced Key"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-inducedKey",
        "type":"select",
        "value":"${typeinfo.inducedKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"default",
          "value":"default"
        },{
          "jsonClass":"Option",
          "text":"/90>0.66",
          "value":"/90>0.66"
        },{
          "jsonClass":"Option",
          "text":"format Induced Groupby",
          "value":"formatInducedGroupby"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatInducedCast-label",
        "type":"label",
        "text":"Format Induced Groupby"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatInducedCast",
        "type":"field",
        "value":"${typeinfo.formatInducedCast}",
        "readonly":false
      }]
    }]
  },{"jsonClass":"Group",
     "label":"Value Operation ?id:A/",
        "rows":[{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-valueOperationKey-label",
        "type":"label",
        "text":"Value Operation Key"
      },{
        "jsonClass":"Select",
        "id":"typeinfo-valueOperationKey",
        "type":"select",
        "value":"${typeinfo.valueOperationKey}",
        "options":[{
          "jsonClass":"Option",
          "text":"default",
          "value":"default"
        },{
          "jsonClass":"Option",
          "text":"formatValueOperation",
          "value":"formatValueOperation"
        }]
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatValueOperationCast-label",
        "type":"label",
        "text":"Format Value Operation"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatValueOperationCast",
        "type":"field",
        "value":"${typeinfo.formatValueOperationCast}",
        "readonly":false
      }]
    },{
      "jsonClass":"Row",
      "cols":[{
        "jsonClass":"Label",
        "id":"typeinfo-formatValueOperationArg-label",
        "type":"label",
        "text":"First Argument in the array"
      },{
        "jsonClass":"Field",
        "id":"typeinfo-formatValueOperationArg",
        "type":"field",
        "value":"${typeinfo.formatValueOperationArg}",
        "readonly":false
      }]
    }]
  }]
}
========
<<<<<<<=edit-js=
elx.bundle.type.ComboChart = {

  	init : function(view) {
         	  var dataKey = elx.MultiKeyColumnSection.getKeyData(view,view.typeinfo.data.fields.keys);
           var tableKey=  new elx.MultiKeyColumnSection("typeinfo-property-keys","typeinfo-property", view, dataKey);
      $("#typeinfo-property-keys").data("table",tableKey);
            var dataOps =  elx.utils.getElxChartOperablesData(view, view.typeinfo.data.fields.operable.values);
   		var tableOp = new elx.MultiChartValueColumnSection("typeinfo-data-fields-operable-values-table",
                                                        "typeinfo-data-fields-operable-values", view, dataOps);
		$("#typeinfo-data-fields-operable-values-table").data("table",tableOp);
      elx.host.utils.initSectionGroups(view,$("#ComboChart-div"));
        $("#typeinfo-data-cToggleTypeCol").val(view.typeinfo.data.fields.cToggleTypeCol[0].name);
      
	},

	validate : function(view) {
		return true;
	},

	save : function(view) {
		var dataTableOp = $("#typeinfo-data-fields-operable-values-table").data("table");
       var dataOp = dataTableOp.table.getData();
          view.typeinfo.data.fields.operable.values = 
          elx.utils.buildElxChartOperablesData(view.typeinfo.data.fields.operable.values,dataOp);
      
	   var dataTableKey = $("#typeinfo-property-keys").data("table");
        var dataKey = dataTableKey.table.getData();
        view.typeinfo.data.fields.keys = elx.MultiKeyColumnSection.buildKeyData(dataKey);
 
		elx.host.utils.saveProperties(view.typeinfo);
      
           	var dToggleType = $("#typeinfo-data-cToggleTypeCol").val();
		view.typeinfo.data.fields.cToggleTypeCol[0].name = dToggleType;
}
}
========
<<<<<<<=view-html=
<style type='text/css'>
.ui-multiselect{padding:2px 0 2px 4px;text-align:left}.ui-multiselect span.ui-icon{float:right}.ui-multiselect-single .ui-multiselect-checkboxes input{position:absolute!important;top:auto!important;left:-9999px}.ui-multiselect-single .ui-multiselect-checkboxes label{padding:5px!important}.ui-multiselect-header{margin-bottom:3px;padding:3px 0 3px 4px}.ui-multiselect-header ul{font-size:.9em}.ui-multiselect-header ul li{float:left;padding:0 10px 0 0}.ui-multiselect-header a{text-decoration:none}.ui-multiselect-header a:hover{text-decoration:underline}.ui-multiselect-header span.ui-icon{float:left}.ui-multiselect-header li.ui-multiselect-close{float:right;text-align:right;padding-right:0}.ui-multiselect-menu{display:none;padding:3px;position:absolute;z-index:10000;text-align:left}.ui-multiselect-checkboxes{position:relative;overflow-y:auto}.ui-multiselect-checkboxes label{cursor:default;display:block;border:1px solid transparent;padding:3px 1px}.ui-multiselect-checkboxes label input{position:relative;top:1px}.ui-multiselect-checkboxes li{clear:both;font-size:.9em;padding-right:3px}.ui-multiselect-checkboxes li.ui-multiselect-optgroup-label{text-align:center;font-weight:700;border-bottom:1px solid}.ui-multiselect-checkboxes li.ui-multiselect-optgroup-label a{display:block;padding:3px;margin:1px 0;text-decoration:none}* html .ui-multiselect-checkboxes label{border:none}
</style>
<table id='dataGroup_${id}'></table>
<div id='${id}'>    
  </div>

<div class='elx-script'>
  //http://jsfiddle.net/gh/get/jquery/1.9.1/highslide-software/highcharts.com/tree/master/samples/highcharts/demo/combo/
  //for the single mouseover
  
  cfgoptions=view.typeinfo;
    
  var div =$("#${id}");
  var viewId=view.id;
 var k=view.typeinfo.data.fields.keys;
  
   var keys=[];
   var dataGroupKey=view.typeinfo.dataGroupKey;
  var xTicksKey=view.typeinfo.xTicksKey;
  var formatXTicksCast=view.typeinfo.formatXTicksCast;
  var orderingKey=view.typeinfo.orderingKey;
  var formatOrderingCast=view.typeinfo.formatOrderingCast;
    var legendKey=view.typeinfo.legendKey;
  var formatLegendCast=view.typeinfo.formatLegendCast;
  var seriesInsertKey=view.typeinfo.seriesInsertKey;
var formatSeriesInsertCast=view.typeinfo.formatSeriesInsertCast;
  var legendEscortLines=(view.typeinfo.legendEscortLines).split(",");
  var typeAntiType=(view.typeinfo.typeAntiType).split(",");
  var toolTipKey=view.typeinfo.toolTipKey;
  var formatToolTipCast=view.typeinfo.formatToolTipCast;
  var formatValueOperationCast=view.typeinfo.formatValueOperationCast;
  var valueOperationKey =view.typeinfo.valueOperationKey;
  var valueOpArr=(view.typeinfo.formatValueOperationArg).split(",");
  
    k.forEach(function(d,i) {
    keys.push(d.name);})
  var columns=[]; var operations=[];
  var t=view.typeinfo.data.fields.operable.values;
    t.forEach(function(d,i) {
  columns.push(d.name);
    operations.push(d.op);
  })

    /* data tab
  
function data(){
var cToggleType=view.typeinfo.data.fields.cToggleTypeCol;
    var t=view.typeinfo.data.fields.operable.values;
  	var k=view.typeinfo.data.fields.keys;

  var columns=[]; var operations=[]; var keys=[];
  columns.push(cToggleType[0].name);
  t.forEach(function(d,i) {
  columns.push(d.name);
    operations.push(d.op);
  })
  k.forEach(function(d,i) {
    keys.push(d.name);})
   return rows.groupBy(keys,columns, operations);
}
data();
   */  
var f=view.typeinfo.data.fields;

<<<<<<< HEAD
<<<<<<< HEAD
	var addDataGroupFn,dataGroupClasses,addPeriodOptions,addSubPeriodOptions,dataGroupAvailClass;
	var periodSelect_val='month', subPeriodSelect_val,dataGroupUsed, cToggleType,smpGroupbySize;
	var periodSelect_el,subPeriodSelect_el;
	var chartPreGen;
	
  var Set_GroupFn1, Get_CategoryFn,average, chartGen, groupByFn,reduceCToggle, arrToHex1,hexToModel1, smpColName, sum, 
=======
=======
>>>>>>> parent of 325f741... added extendArr function (not confident)
 if (view.data.jsonClass === "DataEmbedded"){ 
  /*rawdata=[["2014-04-20",100],["2012-06-20",60],["2014-12-20",92],["2014-02-20",48],
  ["2014-01-20",32],["2014-07-20",46]];
  */
  rawdata= [["Apr",100],["Aug",60],["Dec",92],["Feb",48],["Jan",32],["Jul",46],["Jun",92],["Mar",111],["May",120],["Nov",56],["Oct",45],["Sep",44]];
  } else rawdata=${data};
  
  var Set_GroupFn1, Get_CategoryFn,average, chartGen, groupByFn, hexToModel1, smpColName, sum, 
>>>>>>> parent of 325f741... added extendArr function (not confident)
  zeroOrOne_OperableClass;
  var model_TypeSplitClass,model_DataConvertClass,model_APIClass;
  
  var safeRead; var getWordsBetweenCurlies; var sortByFixedGroupbyClass;
  var interpolateMonthFixed,interpolateGroupby,fixedGroupbyClass;
  var autoDetectCategory,formatXTicksAndOrdering,formatColumnNameCast;
  var reArrangeToSeries,toolTipInserter,complementaryColor;
  var set_yAxisFnBySeries;
  var valueOperating,operation,operationProcesser;
 debugFn();
  multiSelectFn(jQuery);// initalise multiSelect datagroup js
  
<<<<<<< HEAD
<<<<<<< HEAD
 if (view.data.jsonClass === "DataEmbedded"){ 
  rawdata=
  /*[["2014-04-20",100],["2012-06-20",60],["2014-12-20",92],["2014-02-20",48],
  ["2014-01-20",32],["2014-07-20",46]]; */
 
  [["CHIEW HIANG TOH CH","2014-05-01",660],["CHIEW HIANG TOH CH","2014-06-01",799],["CHIEW HIANG TOH CH","2014-07-01",650],["CHIEW HIANG TOH CH","2014-08-01",670],["CHIEW HIANG TOH CH","2014-09-01",626],["CHIEW HIANG TOH CH","2014-10-01",200],["CHONG BENG NG NG","2014-03-01",800],["CHONG BENG NG NG","2014-05-01",1000],["CHONG BENG NG NG","2014-06-01",800],["CHONG BENG NG NG","2014-07-01",800],["CHONG BENG NG NG","2014-08-01",880],["CHONG BENG NG NG","2014-09-01",660],["CHONG BENG NG NG","2014-10-01",400],["ELEX CHAN EC","2014-03-01",626],["ELEX CHAN EC","2014-05-01",690],["ELEX CHAN EC","2014-06-01",883],["ELEX CHAN EC","2014-07-01",669],["ELEX CHAN EC","2014-08-01",661],["ELEX CHAN EC","2014-09-01",662],["ELEX CHAN EC","2014-10-01",236],["KOK MENG LEO KM","2014-04-01",641],["KOK MENG LEO KM","2014-05-01",335],["KOK MENG LEO KM","2014-06-01",679],["KOK MENG LEO KM","2014-07-01",786],["KOK MENG LEO KM","2014-08-01",537],["KOK MENG LEO KM","2014-09-01",696],["LIANG TIAN TL","2014-05-01",724],["LIANG TIAN TL","2014-06-01",683],["LIANG TIAN TL","2014-07-01",644],["LIANG TIAN TL","2014-08-01",444],["LIANG TIAN TL","2014-09-01",676],["LIANG TIAN TL","2014-10-01",196],["LIJUN QIAO LJ","2014-05-01",1310],["LIJUN QIAO LJ","2014-06-01",1117],["LIJUN QIAO LJ","2014-07-01",777],["LIJUN QIAO LJ","2014-08-01",833],["LIJUN QIAO LJ","2014-09-01",1037],["LIJUN QIAO LJ","2014-10-01",420],["MOHD HISHAM BIN MANSOR HS","2014-05-01",665],["MOHD HISHAM BIN MANSOR HS","2014-06-01",707],["MOHD HISHAM BIN MANSOR HS","2014-07-01",999],["MOHD HISHAM BIN MANSOR HS","2014-08-01",815],["MOHD HISHAM BIN MANSOR HS","2014-09-01",662],["MOHD HISHAM BIN MANSOR HS","2014-10-01",240]];
 // [["2014-03-01","CHONG BENG NG NG",800],["2014-03-01","ELEX CHAN EC",626],["2014-04-01","KOK MENG LEO KM",641],["2014-05-01","CHIEW HIANG TOH CH",660],["2014-05-01","CHONG BENG NG NG",1000],["2014-05-01","ELEX CHAN EC",690],["2014-05-01","KOK MENG LEO KM",335],["2014-05-01","LIANG TIAN TL",724],["2014-05-01","LIJUN QIAO LJ",1310],["2014-05-01","MOHD HISHAM BIN MANSOR HS",665],["2014-06-01","CHIEW HIANG TOH CH",799],["2014-06-01","CHONG BENG NG NG",800],["2014-06-01","ELEX CHAN EC",883],["2014-06-01","KOK MENG LEO KM",679],["2014-06-01","LIANG TIAN TL",683],["2014-06-01","LIJUN QIAO LJ",1117],["2014-06-01","MOHD HISHAM BIN MANSOR HS",707],["2014-07-01","CHIEW HIANG TOH CH",650],["2014-07-01","CHONG BENG NG NG",800],["2014-07-01","ELEX CHAN EC",669],["2014-07-01","KOK MENG LEO KM",786],["2014-07-01","LIANG TIAN TL",644],["2014-07-01","LIJUN QIAO LJ",777],["2014-07-01","MOHD HISHAM BIN MANSOR HS",999],["2014-08-01","CHIEW HIANG TOH CH",670],["2014-08-01","CHONG BENG NG NG",880],["2014-08-01","ELEX CHAN EC",661],["2014-08-01","KOK MENG LEO KM",537],["2014-08-01","LIANG TIAN TL",444],["2014-08-01","LIJUN QIAO LJ",833],["2014-08-01","MOHD HISHAM BIN MANSOR HS",815],["2014-09-01","CHIEW HIANG TOH CH",626],["2014-09-01","CHONG BENG NG NG",660],["2014-09-01","ELEX CHAN EC",662],["2014-09-01","KOK MENG LEO KM",696],["2014-09-01","LIANG TIAN TL",676],["2014-09-01","LIJUN QIAO LJ",1037],["2014-09-01","MOHD HISHAM BIN MANSOR HS",662],["2014-10-01","CHIEW HIANG TOH CH",200],["2014-10-01","CHONG BENG NG NG",400],["2014-10-01","ELEX CHAN EC",236],["2014-10-01","LIANG TIAN TL",196],["2014-10-01","LIJUN QIAO LJ",420],["2014-10-01","MOHD HISHAM BIN MANSOR HS",240]];
  //rawdata= [["Apr",100],["Apr",100],["Aug",60],["Dec",92],["Feb",48],["Jan",32],["Jul",46],["Jun",92],["Mar",111],["May",120],["Nov",56],["Oct",45],["Sep",44]];
  rawdata=reduceCToggle(rawdata,view);
  var extendedArr=rawdata;
  } else { rawdata=${data}; rawdata=reduceCToggle(rawdata,view); var extendedArr=extendArr(rawdata,f,view);}
  

=======
>>>>>>> parent of 325f741... added extendArr function (not confident)
=======
>>>>>>> parent of 325f741... added extendArr function (not confident)
  console.log("rawdata",JSON.stringify(rawdata));
  var data1, data2, data3, smpColName;
  data1 = arrToHex1(rawdata, f, view);
  // data1= [{"stock_group#{xaxis}":"AB","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":5298.73,"sum(Gross_Profit)#[spline.R2]":2925906.33},{"stock_group#{xaxis}":"OTHERS","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":256.92,"sum(Gross_Profit)#[spline.R2]":384715.54},{"stock_group#{xaxis}":"FB","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":2649.98,"sum(Gross_Profit)#[spline.R2]":1749060.57},{"stock_group#{xaxis}":"SQB","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":381.59,"sum(Gross_Profit)#[spline.R2]":296729.47},{"stock_group#{xaxis}":"GR","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":347.46,"sum(Gross_Profit)#[spline.R2]":452457.37},{"stock_group#{xaxis}":"P","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":254.72,"sum(Gross_Profit)#[spline.R2]":193801.56},{"stock_group#{xaxis}":"RB","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":307.27,"sum(Gross_Profit)#[spline.R2]":294954.43},{"stock_group#{xaxis}":"CH","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":4943.44,"sum(Gross_Profit)#[spline.R2]":4506888.28},{"stock_group#{xaxis}":"PL","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":14573.05,"sum(Gross_Profit)#[spline.R2]":5688634.39},{"stock_group#{xaxis}":"GC","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":0.31,"sum(Gross_Profit)#[spline.R2]":25452.83},{"stock_group#{xaxis}":"HFHS","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":1286.57,"sum(Gross_Profit)#[spline.R2]":1121954.75},{"stock_group#{xaxis}":"CFHS","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":5994.62,"sum(Gross_Profit)#[spline.R2]":3364209.06},{"stock_group#{xaxis}":"B","sum(Sold_Tonnage)#[columnInducedGroupby.L1]":51636.23,"sum(Gross_Profit)#[spline.R2]":14589162.73}];
console.log("data1",JSON.stringify(data1));
  
  data2=interpolateMonthFixed(data1,view);
  data2=interpolateGroupby(data2,view);
  data3 = hexToModel1(data2, legendKey,formatLegendCast,view);
   var data4=valueOperating(data3,valueOperationKey,formatValueOperationCast);
  addDataGroupFn(data4, 'category', dataGroupKey, '#dataGroup_' + viewId, viewId);
  
  // //console.log("jess",model_APIClass);
 function debugFn(){
<<<<<<< HEAD
<<<<<<< HEAD
    extendArr=function(data,f,view){
	//used when you want to use the same columns in operables
//obtain uniq columnNames
var colNameMap={};
var uniqColName=[];
var fieldsArr=getArr(f,'name',view);
if(view.typeinfo.cToggleKey=='default') fieldsArr=_.rest(fieldsArr);
console.log("fieldsArr",fieldsArr);
var n=0;  //n is the index of unextended Arr
for(var i=0;i< _.size(fieldsArr);i++){
var colAsProperty =fieldsArr[i];

//Obtaining colNameMap
if (_.size(uniqColName)==0) {
uniqColName.push(colAsProperty);
colNameMap[colAsProperty]=i;
n=n+1;
} else {
	var colAsPropertyArr=[colAsProperty];
	var intersectArr=_.intersection(colAsPropertyArr,uniqColName);
	if (_.size(intersectArr)==0){
		uniqColName.push(colAsProperty);
		colNameMap[colAsProperty]=i;
		n=n+1;
		}
	}
}

//using colNameMap to extendArr
var extendedArr=[];
_.each(data ,function(k,l){
//eg of k:[asd,34,34]
var localArr=[];
	_.each(fieldsArr,function(o,p){
	var indexToChoose=colNameMap[o];
	localArr.push(k[indexToChoose]);
	});
	extendedArr.push(localArr);
});
return extendedArr;
	
	};
=======
    
>>>>>>> parent of 325f741... added extendArr function (not confident)
=======
    
>>>>>>> parent of 325f741... added extendArr function (not confident)
   interpolateMonthFixed=function(data,view){
  if (view.typeinfo.interpolateXAxis=="Yes") {
  var categoryName; var valueNames=[];
  var monthFormat=d3.time.format("%b");
  var yearFormat=d3.time.format("%Y");
  var dayFormat=d3.time.format("%e");
  
  var fixedCategory=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  for (var propertyName in data[0]) {
  if(propertyName.contains("#{xaxis}") ==true) categoryName=propertyName;
  else  valueNames.push(propertyName);
  }
  //auto detect
  var sampleCategory=data[0][categoryName];
   var autoDetectArray=['parsableDate','month'];
  var detected;
  var detected2='month';
  
   for (var i=0;i< autoDetectArray.length;i++){
  var j=autoDetectArray[i];
  if (autoDetectCategory[j](sampleCategory)) {detected=j; 
   break;}
  }
   if (typeof detected =='undefined') detected ='normal';
  //--
  if (detected=='parsableDate') {
  
  var existingCat=_.uniq(_.pluck(data,categoryName));
  var existingCatTemp=[];
  _.each(existingCat,function(d) {
    var date= new Date(d);
  existingCatTemp.push(monthFormat(date));});
  existingCat=existingCatTemp;}
  else var existingCat=_.uniq(_.pluck(data,categoryName));
  var newCat=_.difference(fixedCategory,existingCat);
    var newObj={};

  _.each(newCat,function(d,i) {
  	newObj.categoryName=d;
    _.each(valueNames,function(m,n) {
  	newObj[m]=0;
    });
  });
  
   
  if(jQuery.isEmptyObject(newObj)===false&& detected!=='parsableDate') {data.push(newObj);}
 
  } return data;
  };
  interpolateGroupby=function(data,view){
  if (view.typeinfo.interpolateGroupbyKey=="interpolateGroupbyKey") {
  console.log("interpolateGroupbyKey is true");
    eval(view.typeinfo.fixedGroupbyClassCast); //fixedGroupbyClass contains a class with many arrays for interpolation
	
	
	//get sample Objects from data
	
	//find the actual columnName that contains all the groupbys
	var columnNameGroupby={};
	var valueColumnNameArr=[];
	for (var propertyInData in data[0]) {
	if (_.str.include(propertyInData,'groupby')) {
	
		var propertyName=getWordsBetweenCurlies(propertyInData);
		columnNameGroupby[propertyName]=propertyInData;
		} else if (_.str.include(propertyInData,'#[')) valueColumnNameArr.push(propertyInData);
		}
		
	//for all the properties in fixedGroupbyClass, interpolate them into 'data',
	for (var property in fixedGroupbyClass){
	// e.g property is 'groupby1'
	var columnName= columnNameGroupby[property];
	 var existingGroupbyArr=_.uniq(_.pluck(data,columnName));
	 var fixedGroupbyArr=fixedGroupbyClass[property];
	 var differenceArr=_.difference(fixedGroupbyArr,existingGroupbyArr);
	 var sampleObj=_.clone(data[0]);
	_.each(differenceArr,function(m,n){
	sampleObj[columnName]=m; 
	_.each(valueColumnNameArr,function(u,i){ //interpolate with 0
	sampleObj[u]=0;
	});
	});
	 data.push(sampleObj);
	}
	
	
	data=sortByFixedGroupbyClass(data,fixedGroupbyClass,columnNameGroupby,'groupby1');
  } return data;
  };
  	//sort the new data by the fixedGroupbyClass
		 sortByFixedGroupbyClass=function(data,fixedGroupbyClass,columnNameGroupby,basedOn){
		var sortedData=[];
			d3.nest().key(function(d,i) { var columnName=columnNameGroupby[basedOn]; return d[columnName];})
		.rollup(function(d,i){   
			var orderedByColName=d.sort(function(a,b) {
			  return fixedGroupbyClass[basedOn].indexOf(a)-fixedGroupbyClass[basedOn].indexOf(b);
			  }); 
			  _.each(orderedByColName,function(d){
			  sortedData.push(d);
			  });
			  return; }).entries(data);
		return sortedData;};
		
		
	getWordsBetweenCurlies=function(str) {
		  var results = [], re = /{([^}]+)}/g, text;

		  while(text = re.exec(str)) {
			results.push(text[1]);
		  }
		  return results;
		};
  Get_CategoryFn=function(smpColName) {
  _.each(smpColName,function(t,unit){
     if(unit==_.first(Object.keys(smpColName))) {
            var categoryData=_.uniq(_.pluck(t,'category'));
           toCategoryArray=categoryData;
        }
  });
  return toCategoryArray;
  }

   model_TypeSplitClass={
    columnEscortAvgLine:['column','spline'],
    columnEscortSumLine:['column','spline'],
  columnEscortPie:['column',null,'pie'],
    columnNoEscortAvgLine:[,'spline'],
    columnNoEscortSumLine:[,'spline'],
    splineEscortAvgLine:['spline','spline'],
    splineEscortSumLine:['spline','spline'],
    splineNoEscortAvgLine:[,'spline'],
    splineNoEscortSumLine:[,'spline'],
    column:['column'],
    spline:['spline'],
  columnStackGroup:['column'],
  columnStack:['column'],
  columnInducedGroupby:['column'],
  dotGroupby:['spline']
    };
  model_APIClass={
  
  };

model_DataConvertClass = {
  columnEscortAvgLine: {
    0: function(t,unit, index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
      gCount = Get_groupCountFn(t);
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel,modelType,index));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = average(valueData);
      return totalValue;
    }
  },
  columnEscortSumLine: {
    0: function(t,unit, index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel,modelType,index));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = sum(valueData);
      return totalValue;
    }
  },
  columnEscortPie: {
    0: function(t,unit, index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel,modelType,index));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {},
    2: function(t, unit,index) {
      var name_pie, totalValue_pie, valueData;
      valueData = _.pluck(t, "value");
      name_pie = _.first(_.pluck(t, "columnName"));
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      totalValue_pie = sum(valueData);
      return {
        name: name_pie,
        y: totalValue_pie,
        color: Highcharts.getOptions().colors[index],
		modelType:modelType
      };
    }
  },
  columnNoEscortAvgLine: {
    0: null,
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = average(valueData);
      return totalValue;
    }
  },
  columnNoEscortSumLine: {
    0: null,
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = sum(valueData);
      return totalValue;
    }
  },
  splineEscortAvgLine: {
    0: function(t,unit,index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "spline";
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel,modelType,index));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = average(valueData);
      return totalValue;
    }
  },
  splineEscortSumLine: {
    0: function(t,unit,index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "spline";
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel,modelType,index));
      return colToSeriesArr;
    },
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = sum(valueData);
      return totalValue;
    }
  },
  splineNoEscortAvgLine: {
    0: null,
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = average(valueData);
      return totalValue;
    }
  },
  splineNoEscortSumLine: {
    0: null,
    1: function(t,unit, index) {
      var totalValue, valueData;
      valueData = _.pluck(t, "value");
      totalValue = sum(valueData);
      return totalValue;
    }
  },
  column: {
    0: function(t,unit, index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel,modelType,index));
	  return colToSeriesArr;
    }
  },
  spline: {
    0: function(t,unit,index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "spline";
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel,modelType,index));
	 
      return colToSeriesArr;
    }
  },
  columnStackGroup:{
  0: function(t,unit,index,index2) {
    var ShowInLegend_bool=false;
  if(index==0) ShowInLegend_bool=true;
   var valueData=_.pluck(t,'value');
  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      var columnNameData=_.first(_.pluck(t,'legendKey'));
   var yAxisNum = parseInt(numDivFn(_.first(_.pluck(t, 'yAxis')))) - 1;
   colToSeriesArr={type:'column', name:columnNameData,
  data:valueData, stack:unit,
  color: Highcharts.getOptions().colors[index2],
  colorIndex:index2,id:index,modelType:modelType,yAxis:yAxisNum,
  yAxisFull:_.first(_.pluck(t, "yAxis"))
    };
  colToSeriesArr=toolTipInserter(colToSeriesArr,modelType);
  if (index>0) {
  colToSeriesArr['linkedTo']=':previous';
  }
  model_APIClass['plotOptions']={};
  model_APIClass['yAxis']={};
model_APIClass.yAxis['stackLabels']= {
                style: {
                    color: 'black'
                },
                enabled: false
            };
  model_APIClass.plotOptions['column']={};
  model_APIClass.plotOptions.column['stacking']='normal';
  if (toolTipKey=='default') {
   model_APIClass['tooltip']={
                      formatter: function() {
  if(typeof this.point.stackTotal ==='undefined') {
   return '&lt;b&gt;'+ this.x +'&lt;/b&gt;&lt;br/&gt;'+
                        this.series.name +': '+ this.y +'&lt;br/&gt;';
                        
  } else{
                    return '&lt;b&gt;'+ this.x +'&lt;/b&gt;&lt;br/&gt;'+
                        this.series.name +': '+ this.y +'&lt;br/&gt;'+
                          '&lt;br&gt;'+'Total: '+ this.point.stackTotal+'&lt;/br&gt;'+
						'&lt;br&gt;'+this.series.userOptions.stack+'&lt;/br&gt;';
  }}
            };
  
  }
   return colToSeriesArr;
  
  }
  }, columnStack:{
  0:function(t,unit,index) {
      var colToSeriesArr, gCount, subModel;
      subModel = "column";
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
      gCount = Get_groupCountFn(t);
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount, subModel,modelType,index));
   
   model_APIClass['plotOptions']={};
  model_APIClass.plotOptions['column']={};
  model_APIClass.plotOptions.column['stacking']='normal';
  model_APIClass['tooltip']={
                      formatter: function() {
                      return '&lt;b&gt;'+ this.x +'&lt;/b&gt;&lt;br/&gt;'+
                        this.series.name +': '+ this.y +'&lt;br/&gt;'+
                          '&lt;br&gt;';
                }
            };
  model_APIClass['yAxis']={};
  model_APIClass.yAxis={stackLabels:{
   style: {
                    color: 'black'
                },
                enabled: true,
  formatter: function(){
    var sum = 0;
    var series = this.axis.series;
console.log("yAxis Series Formatter",series);
  var series=_.where(series,{'stackKey':'column'});
    for (var i in series){
      sum+=series[i].yData[this.x];
    }
  if (sum < 0 && this.isNegative || sum >= 0 && !this.isNegative) {
  sum=(sum>100000) ? d3.round(sum/1000,2)+'k' : sum;
  return sum;}
  
  }}};
  
  return colToSeriesArr;
  }
  }, columnInducedGroupby:{
  0:function(t,unit,index){
  //describle how column is induced.
  //stockType is fast when value is more than 90 and it will be red.
   var colToSeriesArr, gCount, subModel;
      subModel = "column";
	  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));
 
  gCount = Get_groupCountFn(t);
  var groupByPropName='groupby'+(gCount+1);
    _.each(t,function(d,i) {
  d[groupByPropName]= (d.value/90>0.666) ? 'Fast':'Slow';
  d['legendKey']=(d.value/90>0.666) ? 'Fast':'Slow'; // this overwrite format Legend for this API
  
  });
      colToSeriesArr = _.flatten(Set_GroupFn1(t, gCount+1, subModel,modelType,index));
  
    return colToSeriesArr;
  	}
  },
  dotGroupby:{
   0: function(t,unit,index,index2) {
    
   var valueData=_.pluck(t,'value');
  
      var columnNameData=_.first(_.pluck(t,'legendKey'));
  var modelType=_.first(_.pluck(t,'model'))+"."+_.first(_.pluck(t,'yAxis'));;
 var yAxisNum = parseInt(numDivFn(_.first(_.pluck(t, 'yAxis')))) - 1;
  var placementCalibr;
  if(smpGroupbySize< 4) {
  placementCalibr =0.12;
  }
  if ( 4< smpGroupbySize) {
  placementCalibr =0.07;
  }
      if (  smpGroupbySize==7) {
  placementCalibr =0;
  }
  var scale =d3.scale.linear().domain([1,smpGroupbySize])
  			.range([-smpGroupbySize/2*placementCalibr,smpGroupbySize/2*placementCalibr]);
  console.log("Index:",(index+1)," .scaleIndex",scale(index+1));
   colToSeriesArr={type:'line', name:columnNameData,
  data:valueData, 
  color: complementaryColor(Highcharts.getOptions().colors[index]),
  lineWidth:0,
  colorIndex:index2,pointPlacement:scale(index+1),
  modelType:modelType, yAxis:yAxisNum,yAxisFull:_.first(_.pluck(t, 'yAxis'))
    };

   colToSeriesArr=toolTipInserter(colToSeriesArr,modelType);
   return colToSeriesArr;
  
  }
  
  }
  		
};


  //$$$
 
  chartPreGen = function(data4){
		  var data5=formatXTicksAndOrdering(data4,view);
		  	var data6=sortCategory(data5);
			
		  smpColName = _.groupBy(data6, function(d) {
			return d["columnName"]+d['model'];
		  });		
	   var toCategoryArray=Get_CategoryFn(smpColName);
		  var smpGroupby1=_.groupBy(data6,function(d) {
			return d["groupby1"];
		  });
		  if ((_.where(data3,{model:'columnStackGroup'})).length>0) {
			smpGroupby1=_.groupBy(data6,function(d) {
			return d["groupby1"];
		  });smpColName={};
		  _.each(smpGroupby1,function(t,unit) {
		   smpColName[unit]=_.groupBy(t,function(d){ return d["columnName"];});
		  });
		   smpGroupbySize=_.size(smpGroupby1);
		  }

		 
		   
		  console.log("smpColName",JSON.stringify(smpColName));
		  console.log("toCategoryArray",JSON.stringify(toCategoryArray));
		  var toSeriesArray=[];var output={};model_APIClass={};
		  var containsModelType; //Requires rearranging toSeries because of linked series
		  
		  chartGen(smpColName,model_APIClass,output);
		  for (var propertyName in output) {
			if (Array.isArray(output[propertyName])==true) {
			_.each(output[propertyName],function(d,i){
			toSeriesArray.push(d);
		  });
			  }
			else toSeriesArray.push(output[propertyName]);
		  }
			  toSeriesArray=reArrangeToSeries(toSeriesArray,containsModelType,seriesInsertKey);
				
			//Set YAxis
				var toYaxisArray=[];
		  var yAxisArray=(view.typeinfo.yAxisArray).split(",");
		  var colorSeriesArray=(view.typeinfo.colorSeriesArray).split(",");
		   console.log("toSeriesArray",JSON.stringify(toSeriesArray));
		  console.log("toYaxisArray",JSON.stringify(toYaxisArray));
		   set_yAxisFnBySeries(toSeriesArray,toYaxisArray,yAxisArray,model_APIClass,colorSeriesArray);
		  
		  //console.log("output",JSON.stringify(output));
		 
		  console.log("colorSeriesArray",JSON.stringify(colorSeriesArray));
		  console.log("modelAPIJSON",JSON.stringify(model_APIClass));
			  Highcharts.setOptions({
				colors: colorSeriesArray
			});
			  $("#${id}").highcharts({
			  chart: {
		   zoomType: "xy"
		  },
			  title: {
				text: cfgoptions.title
			  },
		  tooltip: (typeof safeRead(model_APIClass,'toolTip')=="undefined")? {}: safeRead(model_APIClass,'toolTip')
				
			  ,
			  subtitle: {
				text: cfgoptions.subtitle
			  },
			  xAxis: [
				{
				  categories: toCategoryArray
				}
			  ],
			  yAxis: toYaxisArray,
		  labels: {},
			  plotOptions: {
				column: {
				  pointPadding: 0.2,
				  borderWidth: 0,
				stacking: safeRead(model_APIClass,'plotOptions','column','stacking')
				}
			  },
			  series: toSeriesArray
			});
  };

chartGen = function(smpColName, model_APIClass, output) {
    var index;
    index = 0;
  var modelType;
  
      _.each(smpColName, function(t, unit_model) {
        var columnName, propertyName, splitModel, yAxisNum;
        modelType = _.first(_.pluck(t, "model"));
        columnName = _.first(_.pluck(t,"columnName"));
		var unit=_.first(_.pluck(t,"columnName"));
	        propertyName = modelType+"_"+columnName;
          if (typeof modelType != 'undefined') {
            console.log("typeof", typeof modelType);
            yAxisNum = parseInt(numDivFn(_.first(_.pluck(t, 'yAxis')))) - 1;
            splitModel = model_TypeSplitClass[modelType];
                _.each(splitModel, function(subModel, n) {
                if (subModel !== null) {
                    zeroOrOne_OperableClass[n].Init(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output);
 				 zeroOrOne_OperableClass[n].Draw(t, unit, index, output,index2);
                }
            });
            index++;
        } else {
            smpColName = t;
            var index2 = 0;
  			    _.each(smpColName, function(t, unitSec) {
                var columnName, propertyName, splitModel, yAxisNum;
                modelType = _.first(_.pluck(t, "model"));
  if (modelType==='columnStackGroup') {containsModelType='columnStackGroup';}
  if (modelType==='columnInducedGroupby') {containsModelType='columnInducedGroupby';}
                columnName = _.first(_.pluck(t, "columnName"));
                propertyName = modelType + "_" + columnName;
                yAxisNum = parseInt(numDivFn(_.first(_.pluck(t, 'yAxis')))) - 1;
                splitModel = model_TypeSplitClass[modelType];
                //console.log("splitModel", splitModel);
                _.each(splitModel, function(subModel, n) {
                    if (subModel !== null) {

                        zeroOrOne_OperableClass[n].Init(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output);
                        //console.log("output", output);
                        zeroOrOne_OperableClass[n].Draw(t, unit, index, output, index2);
 				
                    }

                });
                index2++;
            });
  				 
            index++;
        }
    });
  
};

Set_GroupFn1 = function(data, groupCount, subModel,modelType,index2) {
    var groupCountArr, groupProp, nest, outNest, output, uniqCategory;
    groupCountArr = d3.range(0, groupCount);
    groupProp = [];
    groupCountArr.forEach(function(d, i) {
        groupProp.push("groupby" + (d + 1));
    });
     uniqCategory = _.uniq(_.pluck(data, "category"));
    nest = d3.nest();
    output = [];
    groupProp.forEach(function(d, i) {
        nest = nest.key(function(k) {
            return k[d];
        }).rollup(function(k) {
            var Num, catDiff, columnD, finalObj, groupby1D, lastD, localCategory, smp, sorted_k, valueD, yAxisD;
            columnD = _.first(_.pluck(k, "columnName"));
            groupby1D = _.first(_.pluck(k, "groupby1"));
            lastD = _.first(_.pluck(k, "legendKey"));
			Num = parseInt(numDivFn(_.first(_.pluck(k, "yAxis"))));
            yAxisD = _.first(_.pluck(k, "yAxis"));
            localCategory = _.pluck(k, "category");
            catDiff = _.difference(uniqCategory, localCategory);
            catDiff.forEach(function(a, b) {
                k.push({
                    model: subModel,
                    yAxis: yAxisD,
                    columnName: columnD,
                    value: 0,
                    legendKey: lastD,
                    category: a
					
                });
            });
            sorted_k = sortByArrayFn(k, uniqCategory);
            valueD = [];
            smp = _.groupBy(sorted_k, function(d) {
                return d["category"];
            });
            _.each(smp, function(l, unit) {
                var value;
                value = sum(_.pluck(l, "value"));
                valueD.push(value);
            });
            finalObj = {
                type: subModel,
             //   yAxis: yAxisD,
                data: valueD,
                name: lastD,
                yAxis: Num - 1,
				yAxisFull:_.first(_.pluck(data, "yAxis")),
				modelType:modelType,
				            };
			
  finalObj=toolTipInserter(finalObj,modelType);
            output.push(finalObj);
  return finalObj; 
        });
    });
    outNest = nest.entries(data);
  if (groupCount===0){
  yAxisD = _.first(_.pluck(data, "yAxis"));
  var lastD = _.first(_.pluck(data, "legendKey"));
  var sorted_k = sortByArrayFn(data, uniqCategory);
  var valueD = [];
  smp = _.groupBy(sorted_k, function(d) {
                return d["category"];
            });
            _.each(smp, function(l, unit) {
                var value;
                value = sum(_.pluck(l, "value"));
                valueD.push(value);
            });
  var Num = parseInt(numDivFn(_.first(_.pluck(data, "yAxis"))));
  var finalObj={type:subModel,data:valueD,name:lastD,yAxis:Num-1,yAxisFull:_.first(_.pluck(data, "yAxis"))};
   finalObj=toolTipInserter(finalObj,modelType);
  output=[finalObj];
  }
    return output;
};

groupByFn = function(data, groupByArr) {
    var aggreData, nest;
    nest = d3.nest();
    aggreData = [];
    _.each(groupByArr, function(m, n) {
        nest.key(function(d) {
            return d[m];
        });
    });
	var result=[];
    nest.rollup(function(d) {
		var sampleObj=_.clone(d[0]);
		var sumValue=d3.sum(d, function(g) {return g.value; });
		sampleObj['value']=sumValue;
		result.push(sampleObj);
		}).entries(data);
	return result;
};
  
  reduceCToggle = function(data,view) { //remove the first element of all entries if cToggleKey is default
	var newData=[];
	  if(view.typeinfo.cToggleKey=='default') {
	  _.each(data,function(d){
	  newData.push(_.rest(d));
	  });
	  return newData;
	  } else return data;
  
  };
  arrToHex1 = function(data, f,view){
	  var keyLength = f.keys.length;
      var nameArr = getArr(f, 'name',view);
      var opArr = getArr(f, 'op',view);
      var idArr = getArr(f, 'id',view);
	      
  
	         var propertiesArr = [];
  if(view.typeinfo.cToggleKey =='cToggleEnabled'){ //cToggle Toggle the chart based on eikon filter
  //Console.log a existing cToggleType
  var cToggleTypeMaj=[];
  _.each(data,function(d) { cToggleTypeMaj.push(d[0]);});
  var cToggleTypeUniq=_.uniq(cToggleTypeMaj);
	var cToggleCount=  _.countBy(cToggleTypeMaj,function(types) {
	  var Ttype;
		_.each(cToggleTypeUniq,function(m){
		if (types == m) Ttype=m;
		});
		return Ttype;
	  });
	  console.info("cToggleCount Type",cToggleCount);
	  // initialize cToggleType
	  
		for (var propertyName in cToggleCount) {
		
		cToggleType= (typeof cToggleType=='undefined')? propertyName:(cToggleCount[cToggleType] >cToggleCount[propertyName]) ? cToggleType:propertyName;
		}
  var keyArr = _.first(nameArr, keyLength+1);
      var colArr = _.last(nameArr, nameArr.length - keyLength);
      var nameArr = _.map(colArr, function(num, i) {
          return opArr[i] + "(" + num + ")";
      });
	   nameArr = keyArr.concat(nameArr);
      var keyLArr = d3.range(0, keyLength+1); //plus 1 because of cToggle
	    keyLArr.forEach(function(d, i) {
          var obj = (i == 0) ? '#{cToggle}': (i == 1)?'#{xaxis}' : '#{groupby' + (i-1) + '}';
          propertiesArr.push(obj);
      })
  } else if(view.typeinfo.cToggleKey =='default')
   {	
		var keyArr = _.first(nameArr, keyLength);
         var colArr = _.last(nameArr, nameArr.length - keyLength);
      var nameArr = _.map(colArr, function(num, i) {
          return opArr[i] + "(" + num + ")";
      });
	   nameArr = keyArr.concat(nameArr);
    var keyLArr = d3.range(0, keyLength); 
	    keyLArr.forEach(function(d, i) {
          var obj = (i == 0) ?'#{xaxis}' : '#{groupby' + i + '}';
          propertiesArr.push(obj);
      })
   }
      
      idArr.forEach(function(d, i) {
          propertiesArr.push("#[" + d + "]");
      })
      console.log("propertiess", JSON.stringify(propertiesArr));
      var combineArr = [];
      propertiesArr.forEach(function(d, i) {
          var obj = nameArr[i] + d;
          combineArr.push(obj);
      })
      console.log("combineArrAS", JSON.stringify(combineArr));
      var globalArr = [];
      data.forEach(function(d, i) {
          var localObj = _.object(combineArr, d);
          globalArr.push(localObj);
      })
      return globalArr;
  
  }
hexToModel1 = function(data, legendKey,formatLegendCast,view) {
    var ReadArray, columnNameArray, model_keyArray, objKey;
    ReadArray = [];
  
    objKey = Object.keys(data[0]);
	model_keyArray = [];
    columnNameArray = [];
<<<<<<< HEAD
<<<<<<< HEAD
	var keyArray=[];
=======
  
>>>>>>> parent of 325f741... added extendArr function (not confident)
=======
  
>>>>>>> parent of 325f741... added extendArr function (not confident)
  //legendFormating
  var formatLegend; //formatLegend should be a class containing the Legend format for each model 
  if (formatLegendCast==="" && legendKey==="formatLegend")
   console.info("Enter formatLegend");
   if (legendKey==="formatLegend" ) {
  console.info("proceed");
    eval(formatLegendCast);} 
     if (view.typeinfo.data.fields.operable.values[0].id==="columnInducedGroupby.L1" 
  && formatLegendCast==="")
  {
  
  formatLegend={'columnInducedGroupby.L1': function(dataZero) {   return dataZero.columnNameWithoutOp;   } };
  }
  
  //-end legendFormating
    objKey.forEach(function(key) {
        var columnNameObj, model_keyObj;
		if ( (key.contains("|")==false) &&(key.contains("#{")==false)) {
			keyArray.push(key);
			} else {
            return;
        }
<<<<<<< HEAD
      
		
    });

=======
        model_keyArray.push(model_keyObj);
        columnNameArray.push(columnNameObj);
    });
<<<<<<< HEAD
>>>>>>> parent of 325f741... added extendArr function (not confident)
=======
>>>>>>> parent of 325f741... added extendArr function (not confident)
    data.forEach(function(d, i) {
        var Category, ColumnName, GroupNameArr, Model, ReadObj, Value, lastGroupby, propertyName;
        ReadObj = {};
        Value = void 0;
        ColumnName = void 0;
        Category = void 0;
        Model = void 0;
        lastGroupby = void 0;
        GroupNameArr = [];
        for (propertyName in d) {
            if (propertyName.contains("xaxis") === true) {
                Category = d[propertyName];
            }
            if (propertyName.contains("groupby") === true) {
                lastGroupby = d[propertyName];
                GroupNameArr.push(lastGroupby);
            }
        }
  		var dataZero=[];
          keyArray.forEach(function(modelKey,n) {
            var allGroupby, cName, lastGroupby_op, model_keyObj, model_keyObjArr, model_yAxisObj, objPush;
            for (propertyName in d) {
                if (propertyName.contains(modelKey) === true) {
                    model_keyObj = propertyName.replace(/.*\[|\]/g, "");
                    model_keyObjArr = model_keyObj.split(".");
                    model_yAxisObj = (model_keyObjArr.length > 1 ? model_keyObjArr[1] : "L1");
                    cName = propertyName.replace(/\#.*/, "");
                  // for taking string in brackets
                  var regExp = /\(([^)]+)\)/;
			
                  var matches=regExp.exec(cName);
                  columnNameWithoutOp=matches[1];
                  opName=cName.split("(")[0];
                  //-end
                    objPush = {
                        model: model_keyObjArr[0],
                        yAxis: model_yAxisObj,
                        columnName: cName,
  						columnNameWithoutOp:columnNameWithoutOp,
  						opName:opName,
                        value: d[propertyName],
                        category: Category
                    };
                    GroupNameArr.forEach(function(d, m) {
  					    propertyName = "groupby" + (m + 1);
                        objPush[propertyName] = d;
                    });
  					if (legendKey === "lastGroupby_op") {
                        lastGroupby_op = lastGroupby + "_" + cName;
                        objPush["legendKey"] = lastGroupby_op;
                        ReadArray.push(objPush);
                    } else if (legendKey === "allGroupby") {
                        allGroupby = GroupNameArr.join("_");
                        objPush["legendKey"] = allGroupby;
                        ReadArray.push(objPush);
                    } else if (legendKey == "op(ColumnName)") {
                        objPush["legendKey"] = cName;
                        ReadArray.push(objPush);
                      } else if (legendKey=="formatLegend"){
					  if (i==0) console.log("objPush for Legend",JSON.stringify(objPush));
                          objPush["legendKey"] = formatLegend[model_keyObj](objPush);
  						ReadArray.push(objPush);
                      }
    						else if (legendKey == "ColumnName") {
                        var regExp = /\(([^)]+)\)/;
                        var matches = regExp.exec(cName);
                        objPush["legendKey"] = matches[1];
                        ReadArray.push(objPush);
                    }
                }
            }
        });
    }); 
    return ReadArray; 
};

sum = function(arr) {
    return _.reduce(arr, (function(memo, num) {
        return memo + num;
    }), 0);
};

average = function(arr) {
    return _.reduce(arr, function(memo, num) {
        return memo + num;
    }, 0) / arr.length;
};

zeroOrOne_OperableClass = {
  0: { //normal
        Init: function(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output, index2) {
            var propertyName;
            propertyName = modelType + "_" + columnName + "_0:" + unit;
          
            output[propertyName] = {};
        },
        Draw: function(d, unit, index, initialized, index2) {
            var columnName, modelType, propertyName;
            modelType = _.first(_.pluck(d, "model"));
            columnName = _.first(_.pluck(d, "columnName"));
            propertyName = modelType + "_" + columnName + "_0:" + unit;
   
            initialized[propertyName] = model_DataConvertClass[modelType][0](d, unit, index, index2);
        }
    },
  1: { //for Average lines
        Init: function(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output) {
		    var propertyName;
            propertyName = modelType + "_" + columnName + "_1";
			// determine legendName
			if (typeof model_APIClass[modelType]=='undefined') {
				if (view.typeinfo.cToggleKey=='cToggleEnabled') {
				var cToggleAntiType=_.without(typeAntiType,cToggleType)[0];
			var legendName=( _.str.include(legendEscortLines[index],'$/type/')  ) ?legendEscortLines[index].split('$/')[0]+cToggleType:
			(_.str.include(legendEscortLines[index],'$/antiType/') ) 
			? legendEscortLines[index].split('$/')[0] + cToggleAntiType: legendEscortLines[index];
			
			}else var legendName=legendEscortLines[index];
			} else var legendName= columnName;
			
            output[propertyName] = {
                type: subModel,
                name: legendName,
                data: [],

                marker: {
                    lineWidth: 2,
                    lineColor: Highcharts.getOptions().colors[yAxisNum],
                    fillColor: 'white'
                },
                dataURL: safeRead(model_APIClass, modelType, 'dataURL'),
                id: safeRead(model_APIClass, modelType, 'id'),
                index: safeRead(model_APIClass, modelType, 'index'),
                legendIndex: safeRead(model_APIClass, modelType, 'legendIndex'),
                stack: safeRead(model_APIClass, modelType, 'stack'),
                xAxis: safeRead(model_APIClass, modelType, 'xAxis'),
                yAxis: yAxisNum,
				zIndex: safeRead(model_APIClass, modelType, 'zIndex')
            };
            
        },
        Draw: function(d, unit, index, initialized,index2) {
            var smpCat;
            smpCat = _.groupBy(d, function(d) {
                return d["category"];
            });
		
            _.each(smpCat, function(t, unit) {
                var columnName, modelType, propertyName;
                modelType = _.first(_.pluck(t, "model"));
                columnName = _.first(_.pluck(t, "columnName"));
  				
                propertyName = modelType + "_" + columnName + "_1";
  
                initialized[propertyName].data.push(model_DataConvertClass[modelType][1](t, unit, index));
				initialized[propertyName]['yAxisFull']=_.first(_.pluck(t,"yAxis"));
            });

        }
    },
  2: { //for pies
        Init: function(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output) {
            var propertyName;
            propertyName = "pie";
            if (_.has(output, propertyName) == false) {
                output[propertyName] = {
                    type: "pie",
                    name: "pie",
                    data: [],
                    center: [50, 80],
                    size: 100,
                    showInLegend: false,
                    dataLabels: {
                        enabled: false
                    }

                };
            }
        },
        Draw: function(d, unit, index, initialized) {
            var columnName, modelType, propertyName;
            modelType = _.first(_.pluck(d, "model"));
            columnName = _.first(_.pluck(d, "columnName"));
            propertyName = "pie";
            initialized[propertyName].data.push(model_DataConvertClass[modelType][2](d, unit, index));
        }
    },
  3: { //for group and stack
        Init: function(subModel, modelType, columnName, yAxisNum, unit, index, model_APIClass, output) {
            var propertyName;
            propertyName = "pie";
            if (_.has(output, propertyName) == false) {
                output[propertyName] = {
                    type: "pie",
                    name: "pie",
                    data: [],
                    center: [50, 80],
                    size: 100,
                    showInLegend: false,
                    dataLabels: {
                        enabled: false
                    }

                };
            }
        },
        Draw: function(d, unit, index, initialized) {
            var columnName, modelType, propertyName;
            modelType = _.first(_.pluck(d, "model"));
            columnName = _.first(_.pluck(d, "columnName"));
            propertyName = "pie";
            initialized[propertyName].data.push(model_DataConvertClass[modelType][2](d, unit, index));
        }

    }
};
safeRead = function() {
    var current, formatProperty, obj, prop, props, val, _i, _len;

    obj = arguments[0], props = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];

    read = function(obj, prop) {
        if ((obj != null ? obj[prop] : void 0) == null) {
            return;
        }
        return obj[prop];
    };

    current = obj;
    for (_i = 0, _len = props.length; _i < _len; _i++) {
        prop = props[_i];

        if (val = read(current, prop)) {
            current = val;
        } else {
            return undefined;
        }
    }
    return current;
};
 

  autoDetectCategory={
  "parsableDate":function(d) {
  //accepts "yyyy-mm-dd","Jul 20,2014"
  var date=new Date(d);
  return date instanceof Date && !isNaN(date.valueOf());
       },
  "month":function(d) { var date=new Date(d+" 2,2014");
  return date instanceof Date && !isNaN(date.valueOf());}
  };
  
  
  
  formatXTicksAndOrdering= function(modelData,view) {
  //Data preProcess
  var formatScale;
  var testArray=["2012-11-25","Jan","Peter","Jan-2014"];
  var sampleCategory=modelData[0].category;
  var autoDetectArray=['parsableDate','month'];
  var detected;
  var detected2='month';
  _.each(autoDetectArray,function(d,i) {
  if (autoDetectCategory[d](sampleCategory)) detected=d; 
   });
  
  for (var i=0;i< autoDetectArray.lenth;i++){
  var j=autoDetectArray[i];
  if (autoDetectCategory[j](sampleCategory)) {detected=d; 
   break;}
  }
   if (typeof detected =='undefined') detected ='normal';
 var formatXTicks,formatOrdering; 
  
var objPushCount=0;
  var autoArr=[];

  switch(orderingKey){
  case 'formatOrderingCast': eval(formatOrderingCast);break;
  case 'alphabetical' :break;
  case 'monthString' :formatOrdering=function (d) { 
  var arr=d.category;
  var date=new Date(arr+' 15, 2014');return date.getTime()/1000}; break;
  case 'year-month' :formatOrdering=function(d){var arr=(d.category).split('-');
  var date=new Date(arr[1]+' 15,'+arr[0]);return date.getTime()/1000}; break;
  case 'month-year' :formatOrdering=function(d) {var arr=(d.category).split('-');
  var date=new Date(arr[0]+' 15,'+arr[1]);return date.getTime()/1000}; break;
  case 'year-quarter' : formatOrdering=function(d) {
  var arr=(d.category).split('-');
  var monthValue=(parseInt(arr[1].split("Q")[1]))*3;
  var monthArr=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  var date=new Date(monthArr[monthValue-1]+' 15,'+arr[0]);return date.getTime()/1000
  }; break;
    case 'year-year':formatOrdering=function(d){
	return parseInt(d);
  }; break;
  case 'date': formatOrdering=function(d) {
    return (new Date(d.category)).getTime()/1000;
    };break;
  case 'valueAscending':formatOrdering=function(d) {
    return d.value;  }; break;
  case 'valueDescending':formatOrdering=function(d) {
  return -d.value;}; break;
  case 'default':break;
  }
  
  if(xTicksKey.contains("%")){
  formatXTicks=function(val){ var date= new Date(val); var formatter=d3.time.format(xTicksKey); return formatter(date);};
  } else if (xTicksKey=='formatXTicksCast') {eval(formatXTicksCast);} else formatXTicks=function(val) {return val;};

    var colNameNest = d3.nest().key(function(d) {return d.columnName;})
  .rollup(function(d) {
  
  _.each(d,function(record,objPushCount) {
   var autoObj=record;
    if (objPushCount ==0) console.log("objpush for Formating Order",JSON.stringify(record));
  
    if (typeof formatOrdering!=='undefined'){
   autoObj['ordering']=formatOrdering(record); 
    } 
  
  if (typeof formatXTicks!=='undefined') {

    autoObj['category']=formatXTicks(record.category);
  }
  autoArr.push(autoObj);
  
  });
  return ;
  })
  .entries(modelData);	
  
  return autoArr;
  };
  sortCategory= function(orderedData){
  //orderedData contains 'ordering' as a property
  //sortedData is sorted according to the ordering
  if( typeof orderedData[0].ordering!=='undefined') {
    var sortedData=[];
  var sortNest = d3.nest().key(function(d) {return d.columnName;}).rollup(function(d) {
  var orderedByColName=d.sort(function(a,b) {
  return a.ordering-b.ordering;
  }); 
  _.each(orderedByColName,function(d){
  sortedData.push(d);
  });
  return;
  }).entries(orderedData);
  return sortedData;
} else return orderedData;
  };
  
  formatInterpolateCast=function(hexData,view){
  var detectable;
  for (var propertyName in hexData[0]) if (propertyName.contains("#{xaxis}")==true) {
  detectable=hexData[0][propertyName];}
  
  
  };
 /* reArrangeToSeries = function(toSeriesArray, containsModelType) {
  console.log('containsModelType',containsModelType);
      if (containsModelType === 'columnStackGroup') { //rearrange 'output'
  var columnData = _.where(toSeriesArray,{'type':'column'});
 
          var sortedOutput = _.sortBy(columnData, function(d) {
              return d.colorIndex;
          });
     var lineData = _.where(toSeriesArray,{'type':'line'});
            toSeriesArray = _.union(sortedOutput,lineData);
        }
  
  if (containsModelType ==='columnInducedGroup') {
  var sortedOutput = _.sortBy(toSeriesArray,function(d) {
  return d.yAxis;
  });
  toSeriesArray=sortedOutput;
  }
  return toSeriesArray;
  };*/
  reArrangeToSeries = function(toSeriesArray, containsModelType,seriesInsertKey) {
console.log('containsModelType',containsModelType);
if (containsModelType === 'columnStackGroup') { //rearrange 'output'
var columnData = _.where(toSeriesArray,{'type':'column'});
var sortedOutput = _.sortBy(columnData, function(d) {
return d.colorIndex;
});
var lineData = _.where(toSeriesArray,{'type':'line'});
toSeriesArray = _.union(sortedOutput,lineData);
}
if (containsModelType ==='columnInducedGroup') {
var sortedOutput = _.sortBy(toSeriesArray,function(d) {
return d.yAxis;
});
toSeriesArray=sortedOutput;
}
switch(seriesInsertKey) {
case 'formatSeriesInsertCast':
//check all the name of the Series are in the formatSeriesInsertCast
var formatSeriesInsert=formatSeriesInsertCast.split(",");
var existingSeries=[];
var sampleObj={};
_.each(toSeriesArray,function(d,i) {
existingSeries.push(d.name);
for (var m=0;m < _.size(formatSeriesInsert);m++) {
if (d.name==formatSeriesInsert[m]) { sampleObj=_.clone(d); break;
}
}
});
var newToSeriesArray=toSeriesArray;
var blankArray=[];
var insertSeries=_.difference(formatSeriesInsert,existingSeries);

_.each(insertSeries,function(m,i){
sampleObj['name']=m; sampleObj['data']=[];
toSeriesArray.push(sampleObj);
});
toSeriesArray.sort(function(a,b) {
return formatSeriesInsert.indexOf(a.name)-formatSeriesInsert.indexOf(b.name);
})
console.log("koi toSeriesArray",JSON.stringify(toSeriesArray));
}
return toSeriesArray;
};
  toolTipInserter = function(finalObj,modelType){
  if (toolTipKey==='formatToolTip') {
  var formatToolTip;
  eval(formatToolTipCast);
  for (var propertyName in formatToolTip) {
  if (propertyName==modelType) {
  var newObj=finalObj;
  newObj['tooltip']=formatToolTip[propertyName];
  finalObj=newObj;
  }
  }
  }
  return finalObj;
  };
 
complementaryColor=function(hexColor) { 
  var hsl=d3.rgb(hexColor).hsl();
  var compHsl=d3.hsl((hsl.h+180)%360,hsl.l,hsl.s);
  return compHsl.toString();
  };
 
set_yAxisFnBySeries=function(toSeriesArray,toYaxisArray,titleArray,model_APIClass,colorSeriesArray) {
var colorSize=_.size(colorSeriesArray);
var yAxisColorMatch={};

	_.each(toSeriesArray,function(d,i) {
		var yAxisPropertyName=d.yAxisFull;
			if (typeof d.colorIndex =='number'){ 
		//make sure if color is defined in the toSeriesArray, colorIndex is also declared
	
	yAxisColorMatch[yAxisPropertyName]={'colorIndex':d.colorIndex};
		} else 		
		yAxisColorMatch[yAxisPropertyName]={'colorIndex':i};
	});
  //check for StackLabels in model_APIClass
  
  if (typeof safeRead(model_APIClass,'yAxis','stackLabels') !=='undefined') {
  var stackLabelsAxis=model_APIClass['yAxis']['stackLabels']; 
  } else stackLabelsAxis=null;
for (var propertyName in yAxisColorMatch) {
	var L_R=axisDivFn(propertyName);
  	var numInYaxis=propertyName.match(/\d+$/)[0]; //obtain the number in the yAxis
		if(L_R.contains("R")==true) {
		toYaxisObj={labels:{ style:{color: Highcharts.getOptions().colors[(yAxisColorMatch[propertyName].colorIndex)%colorSize]}},
		title:{text:titleArray[numInYaxis-1],style:{
		color: Highcharts.getOptions().colors[(yAxisColorMatch[propertyName].colorIndex)%colorSize]}},
  opposite: true, stackLabels: stackLabelsAxis
		};
		}
		else if (L_R.contains("L")==true){
		toYaxisObj={labels:{ style:{color: Highcharts.getOptions().colors[(yAxisColorMatch[propertyName].colorIndex)%colorSize]}},
		title:{text:titleArray[numInYaxis-1],style:{
		color: Highcharts.getOptions().colors[(yAxisColorMatch[propertyName].colorIndex)%colorSize]}},
		opposite: false, stackLabels: stackLabelsAxis
		};
		}
		
		toYaxisArray.push(toYaxisObj);
}	
};
//--Used in valueOperating
operation=function(ABvalue){
	for (var k=0; k< _.size(Object.keys(ABvalue)); k++)
	{ var key=Object.keys(ABvalue)[k];
		this[key]=ABvalue[key]; //declare this.A and this.B as a value
	}
};
operationProcesser=function(vObj){ 
	//vObj={A:[...],B:[...]};
	//for each record, process operation.prototype.value once
	
	//convert key:?id:A/ into just 'A'
	for(var propertyName in vObj) {
	var shortForm=propertyName.substring(propertyName.lastIndexOf("?id:")+4,propertyName.lastIndexOf("/"));
	vObj[shortForm]=vObj[propertyName];
	delete vObj[propertyName];
	}
	var ABargument=Object.keys(vObj);

	//new propertyValue 'processedValue' for vObj
	vObj['processedValue']=[];
	
	var firstABargument=ABargument[0]; //causes the sampleObj to take Object property from ?id:A/
	
for (var i=0;i < _.size(vObj[firstABargument]);i++) {
		var ABvalue={};
		_.each(ABargument,function(m){
		ABvalue[m]=vObj[m][i].value;
		});
		
		var method=new operation(ABvalue);
		_.each(valueOpArr,function(arg,n){
		
		var sampleObj=_.clone(vObj[arg][i]);
		var beforeId=(sampleObj.model).split("?id")[0];
		var afterId=(sampleObj.model).split("/")[1];
		sampleObj['value']=method.value()[n];
		sampleObj['model']=beforeId+afterId;
		vObj['processedValue'].push(sampleObj);
		});
	
	}
		
	return vObj['processedValue'];

};

valueOperating=function(modelData,valueOperationKey,formatValueOperationCast){
	if (valueOperationKey==='formatValueOperation')
	eval(formatValueOperationCast);
	var uniqModel=_.uniq(_.pluck(modelData,'model'));
	var valueOpArr=[]; //property names that contains ?id:/ eg. ?id:A/
	var shortOpArr=[]; //eg. A
		_.each(uniqModel,function(m,n) {
		if (_.str.include(m,'?id')) {valueOpArr.push(m);
		//if (m.contains("?id")==true) {valueOpArr.push(m);
			}
		});
		var vObj={};
		var filterSize,inducedArr;
		_.each(valueOpArr,function(m,n){
		var filteredOp=_.where(modelData,{model:m});
		filterSize=_.size(filteredOp);
		vObj[m]=filteredOp;
		});
	
	var newVObj=operationProcesser(vObj);
	return (valueOperationKey==='formatValueOperation')? newVObj:modelData;
};
//--end valueOperating

//--Data Grouping Tab
    addDataGroupFn = function(modelData, tCol, dataGroupKey, dataGroupHex, viewId) {
        if (dataGroupKey === 'timePeriodOptions') {
			
            var dataGroupContent = d3.select(dataGroupHex);
            dataGroupContent.append("td")
                .append("select").attr("id", 'periodSelect_' + viewId);
            dataGroupContent.append("td").append("select").attr("id", 'subPeriodSelect_' + viewId)
                .attr("title", 'Basic example')
                .attr("multiple", "multiple")
                .attr("size", 5);
			
            var tDomainDate = setTDomain1(modelData, tCol);
            var periodSelect_hex = '#periodSelect_' + viewId;
	            var subPeriodSelect_hex = '#subPeriodSelect_' + viewId
            addSubPeriodOptions(modelData, tDomainDate, tCol, 'month', subPeriodSelect_hex);
            periodSelect_el = $(periodSelect_hex).multiselect({
                selectedList: 1,
                multiple: false,
                click: function(event, ui) {
                    periodSelect_val = [ui.value];
                    //clear options in subPeriodSelect
                    $(subPeriodSelect_hex).empty();
                    //add options in subPeriodSelects
                       	updateSubPeriodOptions(modelData,tDomainDate,tCol,subPeriodSelect_hex);
                },
				minWidth:100

            });
		    addPeriodOptions(periodSelect_el);
	
        } else {
	
		$(periodSelect_hex).empty();
		$(subPeriodSelect_hex).empty();
		chartPreGen(modelData);
		
		}
    };
    dataGroupUsed = function(modelData, tCol,subPeriodSelect_val) {
	//reassign orderingKey
	
	orderingKey='year-'+periodSelect_val;
	console.log("orderingKey in dataGroupUsed",orderingKey);
        var periodFilterClass = {
            'month': function(date) {
                var monthFormat = d3.time.format("%b");
                return monthFormat(date);
            },
            'year': function(date) {
                console.log("now is year", date.getFullYear());
                return date.getFullYear();

            },
            'quarter': function(date) {
                return 'Q' + getQuarter(date);
            }
        };
		var dataGroupCategoryClass={
		     'month': function(date) {
                var monthFormat = d3.time.format("%Y-%b");
                return monthFormat(date);
            },
            'year': function(date) {
                return date.getFullYear();

            },
            'quarter': function(date) {
                return date.getFullYear()+'-Q' + getQuarter(date);
            }
		};
		
        var filteredData = [];
        var subPeriodData = _.map(modelData, function(num, key) {
            var sampleObj = _.clone(num);
            var toColSubPeriodVal = periodFilterClass[periodSelect_val](new Date(sampleObj[tCol]));
            sampleObj['tColSubPeriod'] = ($.isNumeric(toColSubPeriodVal)) ? toColSubPeriodVal.toString() : toColSubPeriodVal;
			var dataGroupCategoryVal=dataGroupCategoryClass[periodSelect_val](new Date(sampleObj[tCol]));
			sampleObj['category'] =($.isNumeric(dataGroupCategoryVal)) ? dataGroupCategoryVal.toString() : dataGroupCategoryVal;
            return sampleObj;
        });
        _.each(subPeriodSelect_val, function(m) {
            filteredData = _.union(filteredData, _.where(subPeriodData, {
                'tColSubPeriod': m
            }));
        });
		
		// group the data by category and aggregate the 'value' column
		var groupCount=0;
	for (var property in filteredData[0]) {
	if (_.str.include(property,'groupby')) groupCount++;
	}
		var groupbyRange=_.map(_.range(1,groupCount+1),function(m){ return 'groupby'+m;});
		var groupByArr=['model','category'];
		var groupByArr=_.union(groupByArr,groupbyRange);
		
		var aggregateData=groupByFn(filteredData,groupByArr);
		console.log('aggregateData',JSON.stringify(aggregateData));
		return aggregateData;
    };
    addPeriodOptions = function(periodSelect_el) {
        _.each(['month', 'year', 'quarter'], function(m) {
            var opt = $('&lt;option /&gt;', {
                value: m,
                text: m

            });
            opt.appendTo(periodSelect_el);
        });
		periodSelect_el.multiselect('refresh');
    };
    updateSubPeriodOptions = function(modelData, tDomainDate, tCol, subPeriodSelect_hex) {
        var updatesubPeriodSelect_el = $(subPeriodSelect_hex);
        var subPeriodArr = dataGroupAvailClass[periodSelect_val](tDomainDate[0], tDomainDate[1]);
        _.each(subPeriodArr, function(m) {

            var opt = $('&lt;option /&gt;', {
                value: ($.isNumeric(m)) ? m.toString() : m,
                text: m,
                selected: 'selected'
            });
            opt.appendTo(updatesubPeriodSelect_el);
        });
	
        updatesubPeriodSelect_el.multiselect('refresh');
    };
    addSubPeriodOptions = function(modelData, tDomainDate, tCol,periodSelect_val, subPeriodSelect_hex) {
        subPeriodSelect_el = $(subPeriodSelect_hex).multiselect({

            selectedText: function(numChecked, numTotal, checkedItems) {
		                subPeriodSelect_val = $.map(checkedItems, function(checkbox) {
                    return checkbox.value;
                });
                           
                var groupedData = dataGroupUsed(modelData, tCol,subPeriodSelect_val); //data filtered by subPeriodselected_val
				if (_.size(groupedData)==0) groupedData =[{model:'column',category:'2012-06-20',yAxis:'L1'}];
				chartPreGen(groupedData);
              
                return subPeriodSelect_val.join(", ");
            },

            uncheckAll: function() {
                subPeriodSelect_val = [];
               var groupedData = dataGroupUsed(modelData, tCol,subPeriodSelect_val);
			   if (_.size(groupedData)==0) groupedData =[{model:'column',category:'2012-06-20',yAxis:'L1'}];
			   chartPreGen(groupedData);
              
            },minWidth:400

        });
        var subPeriodArr = dataGroupAvailClass[periodSelect_val](tDomainDate[0], tDomainDate[1]);
           subPeriodSelect_val = subPeriodArr;
        _.each(subPeriodArr, function(m) {

            var opt = $('&lt;option /&gt;', {
                value: ($.isNumeric(m)) ? m.toString() : m,
                text: m,
                selected: 'selected'
            });
            opt.appendTo(subPeriodSelect_el);
        });
        subPeriodSelect_el.multiselect('refresh');
    };
    dataGroupAvailClass = { //return the available options in each type of dataGroup as an array
        'month': function(minDate, maxDate) {
            var monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            var mDiff = monthDiff(minDate, maxDate);
            if (mDiff < 12) {
                var newMonthName = [];
                var minDateIndex = minDate.getMonth();
                _.each(_.range(minDateIndex, minDateIndex + mDiff), function(m) {
                    var listed = m % 12;
                    newMonthName.push(monthName[listed]);
                });
            }
            return (mDiff >= 12) ? monthName : newMonthName;
        },
        'year': function(minDate, maxDate) {
            return _.range(minDate.getFullYear(), maxDate.getFullYear() + 1);
        },
        'quarter': function(minDate, maxDate) {
            var quarterArr = [];
            var qMin = getQuarter(minDate);
            var qDiff = quarterDiff(minDate, maxDate);
            if (qDiff < 4) {
                _.each(_.range(qMin, qMin + qDiff + 1), function(m) {
                    quarterArr.push('Q' + m);
                });
            }
            return (qDiff == 4) ? ['Q1', 'Q2', 'Q3', 'Q4'] : quarterArr;
        }

    };
	//--end Data Grouping Tab
}

	//helper function for data grouping multiselect
	function setTDomain1(modelData, tCol) {

    var yearFormat = d3.time.format("%Y");
    var monthFormat = d3.time.format("%b");
    //getting first day
    var dayArr = _.pluck(modelData, tCol);
    var epochArr = _.map(dayArr, function(d) {
        var date = new Date(d);
        return date.getTime();
    });
    
    var min = _.min(epochArr);
    
    var roundMin = new Date(min);
    var minMonth = monthFormat(roundMin);
    var minYear = yearFormat(roundMin);
    var minDate = new Date(minMonth + ' 1,' + minYear);

    var max = _.max(epochArr);
    var roundMax = new Date(max);
    var maxMonth = monthFormat(roundMax);
    var maxYear = yearFormat(roundMax);
    var maxDate = new Date(maxMonth + ' 1,' + maxYear);
    var domainArr = [minDate, maxDate];
    var domainArr = [roundMin, roundMax];
    //--
    return domainArr;

}
	function monthDiff(firstDate, secondDate) {
    var months;
    months = (secondDate.getFullYear() - firstDate.getFullYear()) * 12;
    months -= firstDate.getMonth();
    months += secondDate.getMonth();
    return months <= 0 ? 0 : months;
}
	
function getQuarter(d) {
  d = d || new Date();
  var m = Math.floor(d.getMonth()/3) + 1;
  return m > 4? m - 4 : m;
}
	function quarterDiff(firstDate,secondDate){
	var mDiff=monthDiff(firstDate,secondDate);
	var qDiff=(mDiff>=12) ? 4:getQuarter(secondDate)-getQuarter(firstDate);
	return qDiff;
	}
	function yearDiff(firstDate,secondDate){
	return secondDate.getFullYear()-firstDate.getFullYear();
	}
	//--end helper function for data grouping multiselect

	
</div>
========